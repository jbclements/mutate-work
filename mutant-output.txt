"/#:NUM MUTANT: 0:#/""/#:MUTANT USED: take-first-if:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:61:13 (if (hash-has-key? env s) (hash-ref env s) (error (quote interp) \"ZNQR: id not found ~e\" s))>:#/""/#:MUTANT DESTINATION: #<syntax:program3/shuffled-29.rkt:62:17 (hash-ref env s)>:#/""MUTANT_RESULT: failed//##::##//""/#:NUM MUTANT: 1:#/""/#:MUTANT USED: take-second-if:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:61:13 (if (hash-has-key? env s) (hash-ref env s) (error (quote interp) \"ZNQR: id not found ~e\" s))>:#/""/#:MUTANT DESTINATION: #<syntax:program3/shuffled-29.rkt:63:17 (error (quote interp) \"ZNQR: id not found ~e\" s)>:#/""MUTANT_RESULT: failed//##::##//""/#:NUM MUTANT: 2:#/""/#:MUTANT USED: take-first-if:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:67:60 (if boo (interp (first (rest args)) env) (interp (first (rest (rest args))) env))>:#/""/#:MUTANT DESTINATION: #<syntax:program3/shuffled-29.rkt:68:64 (interp (first (rest args)) env)>:#/""MUTANT_RESULT: failed//##::##//""/#:NUM MUTANT: 3:#/""/#:MUTANT USED: take-second-if:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:67:60 (if boo (interp (first (rest args)) env) (interp (first (rest (rest args))) env))>:#/""/#:MUTANT DESTINATION: #<syntax:program3/shuffled-29.rkt:69:64 (interp (first (rest (rest args))) env)>:#/""MUTANT_RESULT: failed//##::##//""/#:NUM MUTANT: 4:#/""/#:MUTANT USED: permute-cond:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:73:23 (cond ((equal? (length args) (length param)) (define new-env (extend-env clo-env param (map (λ ((arg : ExprC)) (interp arg env)) args))) (interp body new-env)) (else (error (quote interp) \"ZNQR: applying function to wrong num of args\")))>:#/""/#:MUTANT DESTINATION: #<syntax:mutation-tester.rkt:58:12 (begin (define new-env (extend-env clo-env param (map (λ ((arg : ExprC)) (interp arg env)) args))) (interp body new-env))>:#/""MUTANT_RESULT: failed//##::##//""/#:NUM MUTANT: 5:#/""/#:MUTANT USED: permute-cond:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:73:23 (cond ((equal? (length args) (length param)) (define new-env (extend-env clo-env param (map (λ ((arg : ExprC)) (interp arg env)) args))) (interp body new-env)) (else (error (quote interp) \"ZNQR: applying function to wrong num of args\")))>:#/""/#:MUTANT DESTINATION: #<syntax:mutation-tester.rkt:58:12 (begin (error (quote interp) \"ZNQR: applying function to wrong num of args\"))>:#/""MUTANT_RESULT: failed//##::##//""/#:NUM MUTANT: 6:#/""/#:MUTANT USED: permute-cond:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:99:2 (cond ((and (NumV? a) (NumV? b)) (NumV (+ (NumV-n a) (NumV-n b)))) (else (error (quote prim-add) \"ZNQR: must add numbers only\")))>:#/""/#:MUTANT DESTINATION: #<syntax:mutation-tester.rkt:58:12 (begin (NumV (+ (NumV-n a) (NumV-n b))))>:#/""MUTANT_RESULT: failed//##::##//""/#:NUM MUTANT: 7:#/""/#:MUTANT USED: permute-cond:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:99:2 (cond ((and (NumV? a) (NumV? b)) (NumV (+ (NumV-n a) (NumV-n b)))) (else (error (quote prim-add) \"ZNQR: must add numbers only\")))>:#/""/#:MUTANT DESTINATION: #<syntax:mutation-tester.rkt:58:12 (begin (error (quote prim-add) \"ZNQR: must add numbers only\"))>:#/""MUTANT_RESULT: failed//##::##//""/#:NUM MUTANT: 8:#/""/#:MUTANT USED: aod-add:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:100:37 (+ (NumV-n a) (NumV-n b))>:#/""/#:MUTANT DESTINATION: #<syntax:mutation-tester.rkt:21:10 (begin NumV-n a)>:#/""MUTANT_RESULT: failed//##::##//""/#:NUM MUTANT: 9:#/""/#:MUTANT USED: aod-add:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:100:37 (+ (NumV-n a) (NumV-n b))>:#/""/#:MUTANT DESTINATION: #<syntax:mutation-tester.rkt:21:10 (begin NumV-n b)>:#/""MUTANT_RESULT: failed//##::##//""/#:NUM MUTANT: 10:#/""/#:MUTANT USED: permute-cond:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:107:2 (cond ((and (NumV? a) (NumV? b)) (NumV (- (NumV-n a) (NumV-n b)))) (else (error (quote prim-sub) \"ZNQR: must subtract numbers only\")))>:#/""/#:MUTANT DESTINATION: #<syntax:mutation-tester.rkt:58:12 (begin (NumV (- (NumV-n a) (NumV-n b))))>:#/""MUTANT_RESULT: failed//##::##//""/#:NUM MUTANT: 11:#/""/#:MUTANT USED: permute-cond:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:107:2 (cond ((and (NumV? a) (NumV? b)) (NumV (- (NumV-n a) (NumV-n b)))) (else (error (quote prim-sub) \"ZNQR: must subtract numbers only\")))>:#/""/#:MUTANT DESTINATION: #<syntax:mutation-tester.rkt:58:12 (begin (error (quote prim-sub) \"ZNQR: must subtract numbers only\"))>:#/""MUTANT_RESULT: failed//##::##//""/#:NUM MUTANT: 12:#/""/#:MUTANT USED: aod-minus:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:108:37 (- (NumV-n a) (NumV-n b))>:#/""/#:MUTANT DESTINATION: #<syntax:mutation-tester.rkt:25:10 (begin NumV-n a)>:#/""MUTANT_RESULT: failed//##::##//""/#:NUM MUTANT: 13:#/""/#:MUTANT USED: aod-minus:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:108:37 (- (NumV-n a) (NumV-n b))>:#/""/#:MUTANT DESTINATION: #<syntax:mutation-tester.rkt:25:10 (begin NumV-n b)>:#/""MUTANT_RESULT: failed//##::##//""/#:NUM MUTANT: 14:#/""/#:MUTANT USED: permute-cond:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:115:2 (cond ((and (NumV? a) (NumV? b)) (NumV (* (NumV-n a) (NumV-n b)))) (else (error (quote prim-mult) \"ZNQR: must multiply numbers only\")))>:#/""/#:MUTANT DESTINATION: #<syntax:mutation-tester.rkt:58:12 (begin (NumV (* (NumV-n a) (NumV-n b))))>:#/""MUTANT_RESULT: failed//##::##//""/#:NUM MUTANT: 15:#/""/#:MUTANT USED: permute-cond:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:115:2 (cond ((and (NumV? a) (NumV? b)) (NumV (* (NumV-n a) (NumV-n b)))) (else (error (quote prim-mult) \"ZNQR: must multiply numbers only\")))>:#/""/#:MUTANT DESTINATION: #<syntax:mutation-tester.rkt:58:12 (begin (error (quote prim-mult) \"ZNQR: must multiply numbers only\"))>:#/""MUTANT_RESULT: failed//##::##//""/#:NUM MUTANT: 16:#/""/#:MUTANT USED: aod-mul:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:116:37 (* (NumV-n a) (NumV-n b))>:#/""/#:MUTANT DESTINATION: #<syntax:mutation-tester.rkt:29:10 (begin NumV-n a)>:#/""MUTANT_RESULT: failed//##::##//""/#:NUM MUTANT: 17:#/""/#:MUTANT USED: aod-mul:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:116:37 (* (NumV-n a) (NumV-n b))>:#/""/#:MUTANT DESTINATION: #<syntax:mutation-tester.rkt:29:10 (begin NumV-n b)>:#/""MUTANT_RESULT: failed//##::##//""/#:NUM MUTANT: 18:#/""/#:MUTANT USED: permute-cond:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:123:2 (cond ((and (and (NumV? a) (NumV? b)) (positive? (NumV-n b))) (NumV (/ (NumV-n a) (NumV-n b)))) ((and (and (NumV? a) (NumV? b)) (zero? (NumV-n b))) (error (quote prim-div) \"ZNQR: cannot divide by zero\")) (else (error (quote prim-div) \"ZNQR: must divide ...>:#/""/#:MUTANT DESTINATION: #<syntax:mutation-tester.rkt:58:12 (begin (NumV (/ (NumV-n a) (NumV-n b))))>:#/""MUTANT_RESULT: failed//##::##//""/#:NUM MUTANT: 19:#/""/#:MUTANT USED: permute-cond:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:123:2 (cond ((and (and (NumV? a) (NumV? b)) (positive? (NumV-n b))) (NumV (/ (NumV-n a) (NumV-n b)))) ((and (and (NumV? a) (NumV? b)) (zero? (NumV-n b))) (error (quote prim-div) \"ZNQR: cannot divide by zero\")) (else (error (quote prim-div) \"ZNQR: must divide ...>:#/""/#:MUTANT DESTINATION: #<syntax:mutation-tester.rkt:58:12 (begin (error (quote prim-div) \"ZNQR: cannot divide by zero\"))>:#/""MUTANT_RESULT: failed//##::##//""/#:NUM MUTANT: 20:#/""/#:MUTANT USED: permute-cond:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:123:2 (cond ((and (and (NumV? a) (NumV? b)) (positive? (NumV-n b))) (NumV (/ (NumV-n a) (NumV-n b)))) ((and (and (NumV? a) (NumV? b)) (zero? (NumV-n b))) (error (quote prim-div) \"ZNQR: cannot divide by zero\")) (else (error (quote prim-div) \"ZNQR: must divide ...>:#/""/#:MUTANT DESTINATION: #<syntax:mutation-tester.rkt:58:12 (begin (error (quote prim-div) \"ZNQR: must divide numbers only\"))>:#/""MUTANT_RESULT: failed//##::##//""/#:NUM MUTANT: 21:#/""/#:MUTANT USED: aod-div:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:124:66 (/ (NumV-n a) (NumV-n b))>:#/""/#:MUTANT DESTINATION: #<syntax:mutation-tester.rkt:33:10 (begin NumV-n a)>:#/""MUTANT_RESULT: failed//##::##//""/#:NUM MUTANT: 22:#/""/#:MUTANT USED: aod-div:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:124:66 (/ (NumV-n a) (NumV-n b))>:#/""/#:MUTANT DESTINATION: #<syntax:mutation-tester.rkt:33:10 (begin NumV-n b)>:#/""MUTANT_RESULT: failed//##::##//""/#:NUM MUTANT: 23:#/""/#:MUTANT USED: permute-cond:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:132:2 (cond ((and (and (NumV? a) (NumV? b)) (<= (NumV-n a) (NumV-n b))) (BoolV #t)) ((and (and (NumV? a) (NumV? b)) (> (NumV-n a) (NumV-n b))) (BoolV #f)) (else (error (quote prim-lte?) \"ZNQR: must input numbers only for <=\")))>:#/""/#:MUTANT DESTINATION: #<syntax:mutation-tester.rkt:58:12 (begin (BoolV #t))>:#/""MUTANT_RESULT: failed//##::##//""/#:NUM MUTANT: 24:#/""/#:MUTANT USED: permute-cond:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:132:2 (cond ((and (and (NumV? a) (NumV? b)) (<= (NumV-n a) (NumV-n b))) (BoolV #t)) ((and (and (NumV? a) (NumV? b)) (> (NumV-n a) (NumV-n b))) (BoolV #f)) (else (error (quote prim-lte?) \"ZNQR: must input numbers only for <=\")))>:#/""/#:MUTANT DESTINATION: #<syntax:mutation-tester.rkt:58:12 (begin (BoolV #f))>:#/""MUTANT_RESULT: failed//##::##//""/#:NUM MUTANT: 25:#/""/#:MUTANT USED: permute-cond:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:132:2 (cond ((and (and (NumV? a) (NumV? b)) (<= (NumV-n a) (NumV-n b))) (BoolV #t)) ((and (and (NumV? a) (NumV? b)) (> (NumV-n a) (NumV-n b))) (BoolV #f)) (else (error (quote prim-lte?) \"ZNQR: must input numbers only for <=\")))>:#/""/#:MUTANT DESTINATION: #<syntax:mutation-tester.rkt:58:12 (begin (error (quote prim-lte?) \"ZNQR: must input numbers only for <=\"))>:#/""MUTANT_RESULT: failed//##::##//""/#:NUM MUTANT: 26:#/""/#:MUTANT USED: permute-cond:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:141:2 (cond ((and (and (NumV? a) (NumV? b)) (equal? (NumV-n a) (NumV-n b))) (BoolV #t)) ((and (and (StringV? a) (StringV? b)) (equal? (StringV-str a) (StringV-str b))) (BoolV #t)) ((and (and (BoolV? a) (BoolV? b)) (equal? (BoolV-boo a) (BoolV-boo b))) (BoolV ...>:#/""/#:MUTANT DESTINATION: #<syntax:mutation-tester.rkt:58:12 (begin (BoolV #t))>:#/""MUTANT_RESULT: failed//##::##//""/#:NUM MUTANT: 27:#/""/#:MUTANT USED: permute-cond:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:141:2 (cond ((and (and (NumV? a) (NumV? b)) (equal? (NumV-n a) (NumV-n b))) (BoolV #t)) ((and (and (StringV? a) (StringV? b)) (equal? (StringV-str a) (StringV-str b))) (BoolV #t)) ((and (and (BoolV? a) (BoolV? b)) (equal? (BoolV-boo a) (BoolV-boo b))) (BoolV ...>:#/""/#:MUTANT DESTINATION: #<syntax:mutation-tester.rkt:58:12 (begin (BoolV #t))>:#/""MUTANT_RESULT: failed//##::##//""/#:NUM MUTANT: 28:#/""/#:MUTANT USED: permute-cond:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:141:2 (cond ((and (and (NumV? a) (NumV? b)) (equal? (NumV-n a) (NumV-n b))) (BoolV #t)) ((and (and (StringV? a) (StringV? b)) (equal? (StringV-str a) (StringV-str b))) (BoolV #t)) ((and (and (BoolV? a) (BoolV? b)) (equal? (BoolV-boo a) (BoolV-boo b))) (BoolV ...>:#/""/#:MUTANT DESTINATION: #<syntax:mutation-tester.rkt:58:12 (begin (BoolV #t))>:#/""MUTANT_RESULT: failed//##::##//""/#:NUM MUTANT: 29:#/""/#:MUTANT USED: permute-cond:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:141:2 (cond ((and (and (NumV? a) (NumV? b)) (equal? (NumV-n a) (NumV-n b))) (BoolV #t)) ((and (and (StringV? a) (StringV? b)) (equal? (StringV-str a) (StringV-str b))) (BoolV #t)) ((and (and (BoolV? a) (BoolV? b)) (equal? (BoolV-boo a) (BoolV-boo b))) (BoolV ...>:#/""/#:MUTANT DESTINATION: #<syntax:mutation-tester.rkt:58:12 (begin (BoolV #f))>:#/""MUTANT_RESULT: failed//##::##//""/#:NUM MUTANT: 30:#/""/#:MUTANT USED: permute-cond:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:150:2 (cond ((and (empty? param) (empty? v)) env) (else (define setting (hash-set env (first param) (first v))) (extend-env setting (rest param) (rest v))))>:#/""/#:MUTANT DESTINATION: #<syntax:mutation-tester.rkt:58:12 (begin env)>:#/""MUTANT_RESULT: failed//##::##//""/#:NUM MUTANT: 31:#/""/#:MUTANT USED: permute-cond:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:150:2 (cond ((and (empty? param) (empty? v)) env) (else (define setting (hash-set env (first param) (first v))) (extend-env setting (rest param) (rest v))))>:#/""/#:MUTANT DESTINATION: #<syntax:mutation-tester.rkt:58:12 (begin (define setting (hash-set env (first param) (first v))) (extend-env setting (rest param) (rest v)))>:#/""MUTANT_RESULT: failed//##::##//""/#:NUM MUTANT: 32:#/""/#:MUTANT USED: permute-cond:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:165:26 (cond ((equal? (length exprs) 3) (AppC (IdC (quote if)) (list (parse (first exprs)) (parse (first (rest exprs))) (parse (first (rest (rest exprs))))))) (else (error (quote parse) \"ZNQR: check arity of ifleq0\")))>:#/""/#:MUTANT DESTINATION: #<syntax:mutation-tester.rkt:58:12 (begin (AppC (IdC (quote if)) (list (parse (first exprs)) (parse (first (rest exprs))) (parse (first (rest (rest exprs)))))))>:#/""MUTANT_RESULT: failed//##::##//""/#:NUM MUTANT: 33:#/""/#:MUTANT USED: permute-cond:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:165:26 (cond ((equal? (length exprs) 3) (AppC (IdC (quote if)) (list (parse (first exprs)) (parse (first (rest exprs))) (parse (first (rest (rest exprs))))))) (else (error (quote parse) \"ZNQR: check arity of ifleq0\")))>:#/""/#:MUTANT DESTINATION: #<syntax:mutation-tester.rkt:58:12 (begin (error (quote parse) \"ZNQR: check arity of ifleq0\"))>:#/""MUTANT_RESULT: failed//##::##//""/#:NUM MUTANT: 34:#/""/#:MUTANT USED: take-first-if:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:171:49 (if (args-same-name? (cast args (Listof Symbol))) (error (quote parse) \"ZNQR: duplicate function arguments\") (LamC (cast args (Listof Symbol)) (parse expr)))>:#/""/#:MUTANT DESTINATION: #<syntax:program3/shuffled-29.rkt:172:53 (error (quote parse) \"ZNQR: duplicate function arguments\")>:#/""MUTANT_RESULT: failed//##::##//""/#:NUM MUTANT: 35:#/""/#:MUTANT USED: take-second-if:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:171:49 (if (args-same-name? (cast args (Listof Symbol))) (error (quote parse) \"ZNQR: duplicate function arguments\") (LamC (cast args (Listof Symbol)) (parse expr)))>:#/""/#:MUTANT DESTINATION: #<syntax:program3/shuffled-29.rkt:173:53 (LamC (cast args (Listof Symbol)) (parse expr))>:#/""MUTANT_RESULT: failed//##::##//""/#:NUM MUTANT: 36:#/""/#:MUTANT USED: permute-cond:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:174:31 (cond ((args-same-name? (return-ids (cast args Sexp))) (error (quote parse) \"ZNQR: duplicate function arguments\")) (else (desugar s)))>:#/""/#:MUTANT DESTINATION: #<syntax:mutation-tester.rkt:58:12 (begin (error (quote parse) \"ZNQR: duplicate function arguments\"))>:#/""MUTANT_RESULT: failed//##::##//""/#:NUM MUTANT: 37:#/""/#:MUTANT USED: permute-cond:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:174:31 (cond ((args-same-name? (return-ids (cast args Sexp))) (error (quote parse) \"ZNQR: duplicate function arguments\")) (else (desugar s)))>:#/""/#:MUTANT DESTINATION: #<syntax:mutation-tester.rkt:58:12 (begin (desugar s))>:#/""MUTANT_RESULT: failed//##::##//""/#:NUM MUTANT: 38:#/""/#:MUTANT USED: permute-cond:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:179:37 (cond ((equal? (length exprs) 2) (AppC (IdC fn) (list (parse (first exprs)) (parse (first (rest exprs)))))) (else (error (quote parse) \"ZNQR: check arity of binop\")))>:#/""/#:MUTANT DESTINATION: #<syntax:mutation-tester.rkt:58:12 (begin (AppC (IdC fn) (list (parse (first exprs)) (parse (first (rest exprs))))))>:#/""MUTANT_RESULT: failed//##::##//""/#:NUM MUTANT: 39:#/""/#:MUTANT USED: permute-cond:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:179:37 (cond ((equal? (length exprs) 2) (AppC (IdC fn) (list (parse (first exprs)) (parse (first (rest exprs)))))) (else (error (quote parse) \"ZNQR: check arity of binop\")))>:#/""/#:MUTANT DESTINATION: #<syntax:mutation-tester.rkt:58:12 (begin (error (quote parse) \"ZNQR: check arity of binop\"))>:#/""MUTANT_RESULT: failed//##::##//""/#:NUM MUTANT: 40:#/""/#:MUTANT USED: permute-cond:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:191:2 (cond ((empty? l) #f) (else (or (ormap (λ ((arg : Symbol)) (equal? (first l) arg)) (rest l)) (args-same-name? (rest l)))))>:#/""/#:MUTANT DESTINATION: #<syntax:mutation-tester.rkt:58:12 (begin #f)>:#/""MUTANT_RESULT: failed//##::##//""/#:NUM MUTANT: 41:#/""/#:MUTANT USED: permute-cond:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:191:2 (cond ((empty? l) #f) (else (or (ormap (λ ((arg : Symbol)) (equal? (first l) arg)) (rest l)) (args-same-name? (rest l)))))>:#/""/#:MUTANT DESTINATION: #<syntax:mutation-tester.rkt:58:12 (begin (or (ormap (λ ((arg : Symbol)) (equal? (first l) arg)) (rest l)) (args-same-name? (rest l))))>:#/""MUTANT_RESULT: failed//##::##//""/#:NUM MUTANT: 42:#/""/#:MUTANT USED: permute-cond:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:210:51 (cond ((equal? (quote ->) id) (error (quote return-ids) \"ZNQR: invalid variable name\")) ((equal? (quote if) id) (error (quote return-ids) \"ZNQR: invalid variable name\")) ((equal? (quote =) id) (error (quote return-ids) \"ZNQR: invalid variable name\")) ((...>:#/""/#:MUTANT DESTINATION: #<syntax:mutation-tester.rkt:58:12 (begin (error (quote return-ids) \"ZNQR: invalid variable name\"))>:#/""MUTANT_RESULT: failed//##::##//""/#:NUM MUTANT: 43:#/""/#:MUTANT USED: permute-cond:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:210:51 (cond ((equal? (quote ->) id) (error (quote return-ids) \"ZNQR: invalid variable name\")) ((equal? (quote if) id) (error (quote return-ids) \"ZNQR: invalid variable name\")) ((equal? (quote =) id) (error (quote return-ids) \"ZNQR: invalid variable name\")) ((...>:#/""/#:MUTANT DESTINATION: #<syntax:mutation-tester.rkt:58:12 (begin (error (quote return-ids) \"ZNQR: invalid variable name\"))>:#/""MUTANT_RESULT: failed//##::##//""/#:NUM MUTANT: 44:#/""/#:MUTANT USED: permute-cond:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:210:51 (cond ((equal? (quote ->) id) (error (quote return-ids) \"ZNQR: invalid variable name\")) ((equal? (quote if) id) (error (quote return-ids) \"ZNQR: invalid variable name\")) ((equal? (quote =) id) (error (quote return-ids) \"ZNQR: invalid variable name\")) ((...>:#/""/#:MUTANT DESTINATION: #<syntax:mutation-tester.rkt:58:12 (begin (error (quote return-ids) \"ZNQR: invalid variable name\"))>:#/""MUTANT_RESULT: failed//##::##//""/#:NUM MUTANT: 45:#/""/#:MUTANT USED: permute-cond:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:210:51 (cond ((equal? (quote ->) id) (error (quote return-ids) \"ZNQR: invalid variable name\")) ((equal? (quote if) id) (error (quote return-ids) \"ZNQR: invalid variable name\")) ((equal? (quote =) id) (error (quote return-ids) \"ZNQR: invalid variable name\")) ((...>:#/""/#:MUTANT DESTINATION: #<syntax:mutation-tester.rkt:58:12 (begin (error (quote return-ids) \"ZNQR: invalid variable name\"))>:#/""MUTANT_RESULT: failed//##::##//""/#:NUM MUTANT: 46:#/""/#:MUTANT USED: permute-cond:#/""/#:MUTANT SOURCE: #<syntax:program3/shuffled-29.rkt:210:51 (cond ((equal? (quote ->) id) (error (quote return-ids) \"ZNQR: invalid variable name\")) ((equal? (quote if) id) (error (quote return-ids) \"ZNQR: invalid variable name\")) ((equal? (quote =) id) (error (quote return-ids) \"ZNQR: invalid variable name\")) ((...>:#/""/#:MUTANT DESTINATION: #<syntax:mutation-tester.rkt:58:12 (begin (cons id (return-ids vars)))>:#/""MUTANT_RESULT: failed//##::##//""\n\n\nMutation score: 1"
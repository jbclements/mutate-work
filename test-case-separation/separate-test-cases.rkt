#lang racket

(require racket/runtime-path)

(define-runtime-path here ".")

;; experimental work on separating test cases from project code in 430 projects


(require "../read-module.rkt")

(define module-stx (read-module (build-path here "./text.rkt")))

(printf "the module syntax (try turning down the arrow): ~v\n" module-stx)

(printf "a single layer unwrap, a list of four syntax objects: ~v\n" (syntax-e module-stx))

(printf "syntax-quote reads a piece of syntax, consider the difference between these 2:\n~a\n~a\n"
        'a
        #'a)

;; also, note that the syntax object created with #'a has a source location that comes from this
;; file, not from text.rkt

;; bogus function that just throws out every other element of the list. It's here because I want
;; to illustrate what it would look like to modify a list of bodies and then reassemble it, below:
(define (mangle l)
  (match l
    ['() '()]
    [(cons a '()) l]
    [(cons a (cons b rest)) (cons a (mangle rest))]))

(require rackunit)
(check-equal? (mangle '(1 2 3 4 5 6)) '(1 3 5))
(check-equal? (mangle '(1 2 3 4 5 6 7)) '(1 3 5 7))

;; taking it apart using syntax-case. The parenthesized list is a list of identifiers
;; that must appear literally:
(define updated
  (syntax-case module-stx (module typed/racket)
    ;; this commented-out clause just returns
    ;; the second of four things, in this case the name of
    ;; the module
    #;[(a b c d) #'b]
    ;; this doesn't match, because #%module-begin is not the same keyword as module:
    [(typed/racket b c d) (error "this code doesn't run")]
    ;; this one does match, because module is the right keyword:
    #;[(module b c d) 'matches1]
    ;; this one also matches, because moduleXX was not declared in the list above:
    #;[(moduleXX b c d) 'matches2]
    ;; subtle: can't use a literal match on #%module-begin here, the one generated by read/syntax
    ;; has a subtly different binding from the one defined in this scope.
    [(module mod-name typed/racket (mod-beg bodies ...))
     #`(module mod-name typed/racket
         (mod-beg
          #,@(mangle (syntax->list #'(bodies ...)))))]
    [_ (error 'no-match "oh dear didn't match")]))


updated
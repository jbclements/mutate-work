{
    "MutationResults": [
        {
            "NumMutant": 0,
            "MutatorType": "RC-if->false",
            "MutantSourceFile": "program3/shuffled-02",
            "MutantSourceRow": 65,
            "MutantSourceCol": 25,
            "MutantSource": "(if (zero? d) (error (quote ZNQR) \\\"Division by zero\\\") (NumV (/ n d)))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 90,
            "MutantDestinationCol": 10,
            "MutantDestination": "(if #f (error (quote ZNQR) \\\"Division by zero\\\") (NumV (/ n d)))",
            "Result": "failed"
        },
        {
            "NumMutant": 1,
            "MutatorType": "RC-if->true",
            "MutantSourceFile": "program3/shuffled-02",
            "MutantSourceRow": 65,
            "MutantSourceCol": 25,
            "MutantSource": "(if (zero? d) (error (quote ZNQR) \\\"Division by zero\\\") (NumV (/ n d)))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 93,
            "MutantDestinationCol": 10,
            "MutantDestination": "(if #t (error (quote ZNQR) \\\"Division by zero\\\") (NumV (/ n d)))",
            "Result": "failed"
        },
        {
            "NumMutant": 2,
            "MutatorType": "aod-div",
            "MutantSourceFile": "program3/shuffled-02",
            "MutantSourceRow": 65,
            "MutantSourceCol": 78,
            "MutantSource": "(/ n d)",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 65,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin . n)",
            "Result": "failed"
        },
        {
            "NumMutant": 3,
            "MutatorType": "aod-div",
            "MutantSourceFile": "program3/shuffled-02",
            "MutantSourceRow": 65,
            "MutantSourceCol": 78,
            "MutantSource": "(/ n d)",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 65,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin . d)",
            "Result": "failed"
        },
        {
            "NumMutant": 4,
            "MutatorType": "RC-or->false",
            "MutantSourceFile": "program3/shuffled-02",
            "MutantSourceRow": 83,
            "MutantSourceCol": 5,
            "MutantSource": "(or (quote if) (quote var) (quote ->) (quote =))",
            "MutantDestinationFile": "program3/shuffled-02",
            "MutantDestinationRow": null,
            "MutantDestinationCol": null,
            "MutantDestination": "(or #f (quote var) (quote ->) (quote =))",
            "Result": "failed"
        },
        {
            "NumMutant": 5,
            "MutatorType": "RC-or->false",
            "MutantSourceFile": "program3/shuffled-02",
            "MutantSourceRow": 83,
            "MutantSourceCol": 5,
            "MutantSource": "(or (quote if) (quote var) (quote ->) (quote =))",
            "MutantDestinationFile": "program3/shuffled-02",
            "MutantDestinationRow": null,
            "MutantDestinationCol": null,
            "MutantDestination": "(or (quote if) #f (quote ->) (quote =))",
            "Result": "failed"
        },
        {
            "NumMutant": 6,
            "MutatorType": "RC-or->false",
            "MutantSourceFile": "program3/shuffled-02",
            "MutantSourceRow": 83,
            "MutantSourceCol": 5,
            "MutantSource": "(or (quote if) (quote var) (quote ->) (quote =))",
            "MutantDestinationFile": "program3/shuffled-02",
            "MutantDestinationRow": null,
            "MutantDestinationCol": null,
            "MutantDestination": "(or (quote if) (quote var) #f (quote =))",
            "Result": "passed"
        },
        {
            "NumMutant": 7,
            "MutatorType": "RC-or->false",
            "MutantSourceFile": "program3/shuffled-02",
            "MutantSourceRow": 83,
            "MutantSourceCol": 5,
            "MutantSource": "(or (quote if) (quote var) (quote ->) (quote =))",
            "MutantDestinationFile": "program3/shuffled-02",
            "MutantDestinationRow": null,
            "MutantDestinationCol": null,
            "MutantDestination": "(or (quote if) (quote var) (quote ->) #f)",
            "Result": "passed"
        },
        {
            "NumMutant": 8,
            "MutatorType": "RC-or->true",
            "MutantSourceFile": "program3/shuffled-02",
            "MutantSourceRow": 83,
            "MutantSourceCol": 5,
            "MutantSource": "(or (quote if) (quote var) (quote ->) (quote =))",
            "MutantDestinationFile": "program3/shuffled-02",
            "MutantDestinationRow": null,
            "MutantDestinationCol": null,
            "MutantDestination": "(or #t (quote var) (quote ->) (quote =))",
            "Result": "failed"
        },
        {
            "NumMutant": 9,
            "MutatorType": "RC-or->true",
            "MutantSourceFile": "program3/shuffled-02",
            "MutantSourceRow": 83,
            "MutantSourceCol": 5,
            "MutantSource": "(or (quote if) (quote var) (quote ->) (quote =))",
            "MutantDestinationFile": "program3/shuffled-02",
            "MutantDestinationRow": null,
            "MutantDestinationCol": null,
            "MutantDestination": "(or (quote if) #t (quote ->) (quote =))",
            "Result": "failed"
        },
        {
            "NumMutant": 10,
            "MutatorType": "RC-or->true",
            "MutantSourceFile": "program3/shuffled-02",
            "MutantSourceRow": 83,
            "MutantSourceCol": 5,
            "MutantSource": "(or (quote if) (quote var) (quote ->) (quote =))",
            "MutantDestinationFile": "program3/shuffled-02",
            "MutantDestinationRow": null,
            "MutantDestinationCol": null,
            "MutantDestination": "(or (quote if) (quote var) #t (quote =))",
            "Result": "passed"
        },
        {
            "NumMutant": 11,
            "MutatorType": "RC-or->true",
            "MutantSourceFile": "program3/shuffled-02",
            "MutantSourceRow": 83,
            "MutantSourceCol": 5,
            "MutantSource": "(or (quote if) (quote var) (quote ->) (quote =))",
            "MutantDestinationFile": "program3/shuffled-02",
            "MutantDestinationRow": null,
            "MutantDestinationCol": null,
            "MutantDestination": "(or (quote if) (quote var) (quote ->) #t)",
            "Result": "passed"
        },
        {
            "NumMutant": 12,
            "MutatorType": "RC-if->false",
            "MutantSourceFile": "program3/shuffled-02",
            "MutantSourceRow": 96,
            "MutantSourceCol": 15,
            "MutantSource": "(if b \\\"true\\\" \\\"false\\\")",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 90,
            "MutantDestinationCol": 10,
            "MutantDestination": "(if #f \\\"true\\\" \\\"false\\\")",
            "Result": "failed"
        },
        {
            "NumMutant": 13,
            "MutatorType": "RC-if->true",
            "MutantSourceFile": "program3/shuffled-02",
            "MutantSourceRow": 96,
            "MutantSourceCol": 15,
            "MutantSource": "(if b \\\"true\\\" \\\"false\\\")",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 93,
            "MutantDestinationCol": 10,
            "MutantDestination": "(if #t \\\"true\\\" \\\"false\\\")",
            "Result": "failed"
        },
        {
            "NumMutant": 14,
            "MutatorType": "RC-if->false",
            "MutantSourceFile": "program3/shuffled-02",
            "MutantSourceRow": 123,
            "MutantSourceCol": 21,
            "MutantSource": "(if bool (interp then env) (interp else env))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 90,
            "MutantDestinationCol": 10,
            "MutantDestination": "(if #f (interp then env) (interp else env))",
            "Result": "failed"
        },
        {
            "NumMutant": 15,
            "MutatorType": "RC-if->true",
            "MutantSourceFile": "program3/shuffled-02",
            "MutantSourceRow": 123,
            "MutantSourceCol": 21,
            "MutantSource": "(if bool (interp then env) (interp else env))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 93,
            "MutantDestinationCol": 10,
            "MutantDestination": "(if #t (interp then env) (interp else env))",
            "Result": "failed"
        },
        {
            "NumMutant": 16,
            "MutatorType": "RC-cond->false",
            "MutantSourceFile": "program3/shuffled-02",
            "MutantSourceRow": 134,
            "MutantSourceCol": 8,
            "MutantSource": "(cond ((equal? (length args) (length params)) (define new-bindings (map Binding params evaluated-args)) (interp body (append new-bindings clos-env))) (else (error (quasiquote ZNQR) \\\"Expected ~e arguments but received ~e\\\" (length params) (length args))))",
            "MutantDestinationFile": "program3/shuffled-02",
            "MutantDestinationRow": null,
            "MutantDestinationCol": null,
            "MutantDestination": "(cond (#f (define new-bindings (map Binding params evaluated-args))) (else (error (quasiquote ZNQR) \\\"Expected ~e arguments but received ~e\\\" (length params) (length args))))",
            "Result": "failed"
        },
        {
            "NumMutant": 17,
            "MutatorType": "RC-cond->false",
            "MutantSourceFile": "program3/shuffled-02",
            "MutantSourceRow": 134,
            "MutantSourceCol": 8,
            "MutantSource": "(cond ((equal? (length args) (length params)) (define new-bindings (map Binding params evaluated-args)) (interp body (append new-bindings clos-env))) (else (error (quasiquote ZNQR) \\\"Expected ~e arguments but received ~e\\\" (length params) (length args))))",
            "MutantDestinationFile": "program3/shuffled-02",
            "MutantDestinationRow": null,
            "MutantDestinationCol": null,
            "MutantDestination": "(cond ((equal? (length args) (length params)) (define new-bindings (map Binding params evaluated-args)) (interp body (append new-bindings clos-env))) (#f (error (quasiquote ZNQR) \\\"Expected ~e arguments but received ~e\\\" (length params) (length args))))",
            "Result": "failed"
        },
        {
            "NumMutant": 18,
            "MutatorType": "RC-cond->true",
            "MutantSourceFile": "program3/shuffled-02",
            "MutantSourceRow": 134,
            "MutantSourceCol": 8,
            "MutantSource": "(cond ((equal? (length args) (length params)) (define new-bindings (map Binding params evaluated-args)) (interp body (append new-bindings clos-env))) (else (error (quasiquote ZNQR) \\\"Expected ~e arguments but received ~e\\\" (length params) (length args))))",
            "MutantDestinationFile": "program3/shuffled-02",
            "MutantDestinationRow": null,
            "MutantDestinationCol": null,
            "MutantDestination": "(cond (#t (define new-bindings (map Binding params evaluated-args))) (else (error (quasiquote ZNQR) \\\"Expected ~e arguments but received ~e\\\" (length params) (length args))))",
            "Result": "failed"
        },
        {
            "NumMutant": 19,
            "MutatorType": "RC-cond->true",
            "MutantSourceFile": "program3/shuffled-02",
            "MutantSourceRow": 134,
            "MutantSourceCol": 8,
            "MutantSource": "(cond ((equal? (length args) (length params)) (define new-bindings (map Binding params evaluated-args)) (interp body (append new-bindings clos-env))) (else (error (quasiquote ZNQR) \\\"Expected ~e arguments but received ~e\\\" (length params) (length args))))",
            "MutantDestinationFile": "program3/shuffled-02",
            "MutantDestinationRow": null,
            "MutantDestinationCol": null,
            "MutantDestination": "(cond ((equal? (length args) (length params)) (define new-bindings (map Binding params evaluated-args)) (interp body (append new-bindings clos-env))) (#t (error (quasiquote ZNQR) \\\"Expected ~e arguments but received ~e\\\" (length params) (length args))))",
            "Result": "passed"
        },
        {
            "NumMutant": 20,
            "MutatorType": "RC-cond->false",
            "MutantSourceFile": "program3/shuffled-02",
            "MutantSourceRow": 161,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((check-duplicates var-syms) (error (quasiquote ZNQR) \\\"var binds identifier to multiple values\\\")) ((findf reserved var-syms) (error (quasiquote ZNQR) \\\"var uses reserved identifier\\\")) (else (define var-asgns (map parse (cast exprs (Listof Sexp)))) ...",
            "MutantDestinationFile": "program3/shuffled-02",
            "MutantDestinationRow": null,
            "MutantDestinationCol": null,
            "MutantDestination": "(cond (#f (error (quasiquote ZNQR) \\\"var binds identifier to multiple values\\\")) ((findf reserved var-syms) (error (quasiquote ZNQR) \\\"var uses reserved identifier\\\")) (else (define var-asgns (map parse (cast exprs (Listof Sexp)))) (AppC (FunC var-syms (par...",
            "Result": "failed"
        },
        {
            "NumMutant": 21,
            "MutatorType": "RC-cond->false",
            "MutantSourceFile": "program3/shuffled-02",
            "MutantSourceRow": 161,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((check-duplicates var-syms) (error (quasiquote ZNQR) \\\"var binds identifier to multiple values\\\")) ((findf reserved var-syms) (error (quasiquote ZNQR) \\\"var uses reserved identifier\\\")) (else (define var-asgns (map parse (cast exprs (Listof Sexp)))) ...",
            "MutantDestinationFile": "program3/shuffled-02",
            "MutantDestinationRow": null,
            "MutantDestinationCol": null,
            "MutantDestination": "(cond ((check-duplicates var-syms) (error (quasiquote ZNQR) \\\"var binds identifier to multiple values\\\")) (#f (error (quasiquote ZNQR) \\\"var uses reserved identifier\\\")) (else (define var-asgns (map parse (cast exprs (Listof Sexp)))) (AppC (FunC var-syms (p...",
            "Result": "failed"
        },
        {
            "NumMutant": 22,
            "MutatorType": "RC-cond->false",
            "MutantSourceFile": "program3/shuffled-02",
            "MutantSourceRow": 161,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((check-duplicates var-syms) (error (quasiquote ZNQR) \\\"var binds identifier to multiple values\\\")) ((findf reserved var-syms) (error (quasiquote ZNQR) \\\"var uses reserved identifier\\\")) (else (define var-asgns (map parse (cast exprs (Listof Sexp)))) ...",
            "MutantDestinationFile": "program3/shuffled-02",
            "MutantDestinationRow": null,
            "MutantDestinationCol": null,
            "MutantDestination": "(cond ((check-duplicates var-syms) (error (quasiquote ZNQR) \\\"var binds identifier to multiple values\\\")) ((findf reserved var-syms) (error (quasiquote ZNQR) \\\"var uses reserved identifier\\\")) (#f (define var-asgns (map parse (cast exprs (Listof Sexp))))))",
            "Result": "failed"
        },
        {
            "NumMutant": 23,
            "MutatorType": "RC-cond->true",
            "MutantSourceFile": "program3/shuffled-02",
            "MutantSourceRow": 161,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((check-duplicates var-syms) (error (quasiquote ZNQR) \\\"var binds identifier to multiple values\\\")) ((findf reserved var-syms) (error (quasiquote ZNQR) \\\"var uses reserved identifier\\\")) (else (define var-asgns (map parse (cast exprs (Listof Sexp)))) ...",
            "MutantDestinationFile": "program3/shuffled-02",
            "MutantDestinationRow": null,
            "MutantDestinationCol": null,
            "MutantDestination": "(cond (#t (error (quasiquote ZNQR) \\\"var binds identifier to multiple values\\\")) ((findf reserved var-syms) (error (quasiquote ZNQR) \\\"var uses reserved identifier\\\")) (else (define var-asgns (map parse (cast exprs (Listof Sexp)))) (AppC (FunC var-syms (par...",
            "Result": "failed"
        },
        {
            "NumMutant": 24,
            "MutatorType": "RC-cond->true",
            "MutantSourceFile": "program3/shuffled-02",
            "MutantSourceRow": 161,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((check-duplicates var-syms) (error (quasiquote ZNQR) \\\"var binds identifier to multiple values\\\")) ((findf reserved var-syms) (error (quasiquote ZNQR) \\\"var uses reserved identifier\\\")) (else (define var-asgns (map parse (cast exprs (Listof Sexp)))) ...",
            "MutantDestinationFile": "program3/shuffled-02",
            "MutantDestinationRow": null,
            "MutantDestinationCol": null,
            "MutantDestination": "(cond ((check-duplicates var-syms) (error (quasiquote ZNQR) \\\"var binds identifier to multiple values\\\")) (#t (error (quasiquote ZNQR) \\\"var uses reserved identifier\\\")) (else (define var-asgns (map parse (cast exprs (Listof Sexp)))) (AppC (FunC var-syms (p...",
            "Result": "failed"
        },
        {
            "NumMutant": 25,
            "MutatorType": "RC-cond->true",
            "MutantSourceFile": "program3/shuffled-02",
            "MutantSourceRow": 161,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((check-duplicates var-syms) (error (quasiquote ZNQR) \\\"var binds identifier to multiple values\\\")) ((findf reserved var-syms) (error (quasiquote ZNQR) \\\"var uses reserved identifier\\\")) (else (define var-asgns (map parse (cast exprs (Listof Sexp)))) ...",
            "MutantDestinationFile": "program3/shuffled-02",
            "MutantDestinationRow": null,
            "MutantDestinationCol": null,
            "MutantDestination": "(cond ((check-duplicates var-syms) (error (quasiquote ZNQR) \\\"var binds identifier to multiple values\\\")) ((findf reserved var-syms) (error (quasiquote ZNQR) \\\"var uses reserved identifier\\\")) (#t (define var-asgns (map parse (cast exprs (Listof Sexp))))))",
            "Result": "failed"
        },
        {
            "NumMutant": 26,
            "MutatorType": "RC-cond->false",
            "MutantSourceFile": "program3/shuffled-02",
            "MutantSourceRow": 167,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((check-duplicates param-syms) (error (quasiquote ZNQR) \\\"Function has parameters with same identifiers\\\")) (else (FunC param-syms (parse body))))",
            "MutantDestinationFile": "program3/shuffled-02",
            "MutantDestinationRow": null,
            "MutantDestinationCol": null,
            "MutantDestination": "(cond (#f (error (quasiquote ZNQR) \\\"Function has parameters with same identifiers\\\")) (else (FunC param-syms (parse body))))",
            "Result": "failed"
        },
        {
            "NumMutant": 27,
            "MutatorType": "RC-cond->false",
            "MutantSourceFile": "program3/shuffled-02",
            "MutantSourceRow": 167,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((check-duplicates param-syms) (error (quasiquote ZNQR) \\\"Function has parameters with same identifiers\\\")) (else (FunC param-syms (parse body))))",
            "MutantDestinationFile": "program3/shuffled-02",
            "MutantDestinationRow": null,
            "MutantDestinationCol": null,
            "MutantDestination": "(cond ((check-duplicates param-syms) (error (quasiquote ZNQR) \\\"Function has parameters with same identifiers\\\")) (#f (FunC param-syms (parse body))))",
            "Result": "failed"
        },
        {
            "NumMutant": 28,
            "MutatorType": "RC-cond->true",
            "MutantSourceFile": "program3/shuffled-02",
            "MutantSourceRow": 167,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((check-duplicates param-syms) (error (quasiquote ZNQR) \\\"Function has parameters with same identifiers\\\")) (else (FunC param-syms (parse body))))",
            "MutantDestinationFile": "program3/shuffled-02",
            "MutantDestinationRow": null,
            "MutantDestinationCol": null,
            "MutantDestination": "(cond (#t (error (quasiquote ZNQR) \\\"Function has parameters with same identifiers\\\")) (else (FunC param-syms (parse body))))",
            "Result": "failed"
        },
        {
            "NumMutant": 29,
            "MutatorType": "RC-cond->true",
            "MutantSourceFile": "program3/shuffled-02",
            "MutantSourceRow": 167,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((check-duplicates param-syms) (error (quasiquote ZNQR) \\\"Function has parameters with same identifiers\\\")) (else (FunC param-syms (parse body))))",
            "MutantDestinationFile": "program3/shuffled-02",
            "MutantDestinationRow": null,
            "MutantDestinationCol": null,
            "MutantDestination": "(cond ((check-duplicates param-syms) (error (quasiquote ZNQR) \\\"Function has parameters with same identifiers\\\")) (#t (FunC param-syms (parse body))))",
            "Result": "passed"
        }
    ],
    "MutationScore": 0.8,
    "TestFile": "program3/shuffled-02.rkt"
}
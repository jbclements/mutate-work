{
    "MutationResults": [
        {
            "NumMutant": 0,
            "MutatorType": "take-first-if",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 65,
            "MutantSourceCol": 45,
            "MutantSource": "(if (check-duplicates (cast s (Listof Symbol))) (error (quote interp) \\\"ZNQR: illegal duplicate parameter names\\\") (lamC (cast s (Listof Symbol)) (parse body)))",
            "MutantDestinationFile": "program3/shuffled-11",
            "MutantDestinationRow": 66,
            "MutantDestinationCol": 49,
            "MutantDestination": "(error (quote interp) \\\"ZNQR: illegal duplicate parameter names\\\")",
            "Result": "failed"
        },
        {
            "NumMutant": 1,
            "MutatorType": "take-second-if",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 65,
            "MutantSourceCol": 45,
            "MutantSource": "(if (check-duplicates (cast s (Listof Symbol))) (error (quote interp) \\\"ZNQR: illegal duplicate parameter names\\\") (lamC (cast s (Listof Symbol)) (parse body)))",
            "MutantDestinationFile": "program3/shuffled-11",
            "MutantDestinationRow": 67,
            "MutantDestinationCol": 49,
            "MutantDestination": "(lamC (cast s (Listof Symbol)) (parse body))",
            "Result": "failed"
        },
        {
            "NumMutant": 2,
            "MutatorType": "take-first-if",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 68,
            "MutantSourceCol": 26,
            "MutantSource": "(if (equal? (length parts) 3) (ifC (parse (first parts)) (parse (second parts)) (parse (third parts))) (error (quote parse) \\\"ZNQR: incorrect if formatting\\\"))",
            "MutantDestinationFile": "program3/shuffled-11",
            "MutantDestinationRow": 69,
            "MutantDestinationCol": 29,
            "MutantDestination": "(ifC (parse (first parts)) (parse (second parts)) (parse (third parts)))",
            "Result": "failed"
        },
        {
            "NumMutant": 3,
            "MutatorType": "take-second-if",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 68,
            "MutantSourceCol": 26,
            "MutantSource": "(if (equal? (length parts) 3) (ifC (parse (first parts)) (parse (second parts)) (parse (third parts))) (error (quote parse) \\\"ZNQR: incorrect if formatting\\\"))",
            "MutantDestinationFile": "program3/shuffled-11",
            "MutantDestinationRow": 70,
            "MutantDestinationCol": 29,
            "MutantDestination": "(error (quote parse) \\\"ZNQR: incorrect if formatting\\\")",
            "Result": "failed"
        },
        {
            "NumMutant": 4,
            "MutatorType": "take-first-if",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 76,
            "MutantSourceCol": 19,
            "MutantSource": "(if (or (equal? s (quote if)) (equal? s (quote =)) (equal? s (quote var)) (equal? s (quote ->))) (error (quote parse) \\\"ZNQR: ~e is not a valid identifier\\\" s) (idC s))",
            "MutantDestinationFile": "program3/shuffled-11",
            "MutantDestinationRow": 77,
            "MutantDestinationCol": 23,
            "MutantDestination": "(error (quote parse) \\\"ZNQR: ~e is not a valid identifier\\\" s)",
            "Result": "failed"
        },
        {
            "NumMutant": 5,
            "MutatorType": "take-second-if",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 76,
            "MutantSourceCol": 19,
            "MutantSource": "(if (or (equal? s (quote if)) (equal? s (quote =)) (equal? s (quote var)) (equal? s (quote ->))) (error (quote parse) \\\"ZNQR: ~e is not a valid identifier\\\" s) (idC s))",
            "MutantDestinationFile": "program3/shuffled-11",
            "MutantDestinationRow": 78,
            "MutantDestinationCol": 23,
            "MutantDestination": "(idC s)",
            "Result": "failed"
        },
        {
            "NumMutant": 6,
            "MutatorType": "take-first-if",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 83,
            "MutantSourceCol": 2,
            "MutantSource": "(if (check-duplicates vars) (error (quote desugar) \\\"ZNQR: illegal duplicate parameter names\\\") (if (and (empty? vars) (contains-eq? body)) (error (quote desugar) \\\"ZNQR: function definition requires a body\\\") (if (contains-illegal? vars) (error (quote cont...",
            "MutantDestinationFile": "program3/shuffled-11",
            "MutantDestinationRow": 84,
            "MutantDestinationCol": 6,
            "MutantDestination": "(error (quote desugar) \\\"ZNQR: illegal duplicate parameter names\\\")",
            "Result": "failed"
        },
        {
            "NumMutant": 7,
            "MutatorType": "take-second-if",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 83,
            "MutantSourceCol": 2,
            "MutantSource": "(if (check-duplicates vars) (error (quote desugar) \\\"ZNQR: illegal duplicate parameter names\\\") (if (and (empty? vars) (contains-eq? body)) (error (quote desugar) \\\"ZNQR: function definition requires a body\\\") (if (contains-illegal? vars) (error (quote cont...",
            "MutantDestinationFile": "program3/shuffled-11",
            "MutantDestinationRow": 85,
            "MutantDestinationCol": 6,
            "MutantDestination": "(if (and (empty? vars) (contains-eq? body)) (error (quote desugar) \\\"ZNQR: function definition requires a body\\\") (if (contains-illegal? vars) (error (quote contains-illegal?) \\\"ZNQR: contains illegal identifier name\\\") (lamC vars (parse body))))",
            "Result": "failed"
        },
        {
            "NumMutant": 8,
            "MutatorType": "take-first-if",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 85,
            "MutantSourceCol": 6,
            "MutantSource": "(if (and (empty? vars) (contains-eq? body)) (error (quote desugar) \\\"ZNQR: function definition requires a body\\\") (if (contains-illegal? vars) (error (quote contains-illegal?) \\\"ZNQR: contains illegal identifier name\\\") (lamC vars (parse body))))",
            "MutantDestinationFile": "program3/shuffled-11",
            "MutantDestinationRow": 86,
            "MutantDestinationCol": 10,
            "MutantDestination": "(error (quote desugar) \\\"ZNQR: function definition requires a body\\\")",
            "Result": "failed"
        },
        {
            "NumMutant": 9,
            "MutatorType": "take-second-if",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 85,
            "MutantSourceCol": 6,
            "MutantSource": "(if (and (empty? vars) (contains-eq? body)) (error (quote desugar) \\\"ZNQR: function definition requires a body\\\") (if (contains-illegal? vars) (error (quote contains-illegal?) \\\"ZNQR: contains illegal identifier name\\\") (lamC vars (parse body))))",
            "MutantDestinationFile": "program3/shuffled-11",
            "MutantDestinationRow": 87,
            "MutantDestinationCol": 10,
            "MutantDestination": "(if (contains-illegal? vars) (error (quote contains-illegal?) \\\"ZNQR: contains illegal identifier name\\\") (lamC vars (parse body)))",
            "Result": "failed"
        },
        {
            "NumMutant": 10,
            "MutatorType": "take-first-if",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 87,
            "MutantSourceCol": 10,
            "MutantSource": "(if (contains-illegal? vars) (error (quote contains-illegal?) \\\"ZNQR: contains illegal identifier name\\\") (lamC vars (parse body)))",
            "MutantDestinationFile": "program3/shuffled-11",
            "MutantDestinationRow": 88,
            "MutantDestinationCol": 14,
            "MutantDestination": "(error (quote contains-illegal?) \\\"ZNQR: contains illegal identifier name\\\")",
            "Result": "failed"
        },
        {
            "NumMutant": 11,
            "MutatorType": "take-second-if",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 87,
            "MutantSourceCol": 10,
            "MutantSource": "(if (contains-illegal? vars) (error (quote contains-illegal?) \\\"ZNQR: contains illegal identifier name\\\") (lamC vars (parse body)))",
            "MutantDestinationFile": "program3/shuffled-11",
            "MutantDestinationRow": 89,
            "MutantDestinationCol": 14,
            "MutantDestination": "(lamC vars (parse body))",
            "Result": "failed"
        },
        {
            "NumMutant": 12,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 99,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((empty? s) #f) ((or (equal? (first s) (quote if)) (equal? (first s) (quote =)) (equal? (first s) (quote var)) (equal? (first s) (quote ->))) #t) (else (contains-illegal? (rest s))))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin #f)",
            "Result": "failed"
        },
        {
            "NumMutant": 13,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 99,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((empty? s) #f) ((or (equal? (first s) (quote if)) (equal? (first s) (quote =)) (equal? (first s) (quote var)) (equal? (first s) (quote ->))) #t) (else (contains-illegal? (rest s))))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin #t)",
            "Result": "failed"
        },
        {
            "NumMutant": 14,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 99,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((empty? s) #f) ((or (equal? (first s) (quote if)) (equal? (first s) (quote =)) (equal? (first s) (quote var)) (equal? (first s) (quote ->))) #t) (else (contains-illegal? (rest s))))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (contains-illegal? (rest s)))",
            "Result": "failed"
        },
        {
            "NumMutant": 15,
            "MutatorType": "take-first-if",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 114,
            "MutantSourceCol": 35,
            "MutantSource": "(if (equal? (length a) (length params)) (append (map (lambda ((name : Symbol) (val : ExprC)) (Binding name (interp val env))) params a) cur-env) (error (quote interp) \\\"ZNQR: number of arguments supplied does not match parameters\\\"))",
            "MutantDestinationFile": "program3/shuffled-11",
            "MutantDestinationRow": 115,
            "MutantDestinationCol": 39,
            "MutantDestination": "(append (map (lambda ((name : Symbol) (val : ExprC)) (Binding name (interp val env))) params a) cur-env)",
            "Result": "failed"
        },
        {
            "NumMutant": 16,
            "MutatorType": "take-second-if",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 114,
            "MutantSourceCol": 35,
            "MutantSource": "(if (equal? (length a) (length params)) (append (map (lambda ((name : Symbol) (val : ExprC)) (Binding name (interp val env))) params a) cur-env) (error (quote interp) \\\"ZNQR: number of arguments supplied does not match parameters\\\"))",
            "MutantDestinationFile": "program3/shuffled-11",
            "MutantDestinationRow": 117,
            "MutantDestinationCol": 39,
            "MutantDestination": "(error (quote interp) \\\"ZNQR: number of arguments supplied does not match parameters\\\")",
            "Result": "failed"
        },
        {
            "NumMutant": 17,
            "MutatorType": "take-first-if",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 122,
            "MutantSourceCol": 25,
            "MutantSource": "(if (BoolV? check) (if (BoolV-bool check) (interp then env) (interp else env)) (error (quote interp) \\\"ZNQR: test value for if must be boolean\\\"))",
            "MutantDestinationFile": "program3/shuffled-11",
            "MutantDestinationRow": 123,
            "MutantDestinationCol": 29,
            "MutantDestination": "(if (BoolV-bool check) (interp then env) (interp else env))",
            "Result": "failed"
        },
        {
            "NumMutant": 18,
            "MutatorType": "take-second-if",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 122,
            "MutantSourceCol": 25,
            "MutantSource": "(if (BoolV? check) (if (BoolV-bool check) (interp then env) (interp else env)) (error (quote interp) \\\"ZNQR: test value for if must be boolean\\\"))",
            "MutantDestinationFile": "program3/shuffled-11",
            "MutantDestinationRow": 124,
            "MutantDestinationCol": 29,
            "MutantDestination": "(error (quote interp) \\\"ZNQR: test value for if must be boolean\\\")",
            "Result": "failed"
        },
        {
            "NumMutant": 19,
            "MutatorType": "take-first-if",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 123,
            "MutantSourceCol": 29,
            "MutantSource": "(if (BoolV-bool check) (interp then env) (interp else env))",
            "MutantDestinationFile": "program3/shuffled-11",
            "MutantDestinationRow": 123,
            "MutantDestinationCol": 52,
            "MutantDestination": "(interp then env)",
            "Result": "failed"
        },
        {
            "NumMutant": 20,
            "MutatorType": "take-second-if",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 123,
            "MutantSourceCol": 29,
            "MutantSource": "(if (BoolV-bool check) (interp then env) (interp else env))",
            "MutantDestinationFile": "program3/shuffled-11",
            "MutantDestinationRow": 123,
            "MutantDestinationCol": 70,
            "MutantDestination": "(interp else env)",
            "Result": "failed"
        },
        {
            "NumMutant": 21,
            "MutatorType": "take-first-if",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 129,
            "MutantSourceCol": 2,
            "MutantSource": "(if (equal? (length args) 2) (let ((left (interp (first args) env))) (let ((right (interp (second args) env))) (match op ((quote +) (if (and (NumV? left) (NumV? right)) (NumV (+ (NumV-n left) (NumV-n right))) (error (quote interp) \\\"ZNQR: Both operands o...",
            "MutantDestinationFile": "program3/shuffled-11",
            "MutantDestinationRow": 130,
            "MutantDestinationCol": 6,
            "MutantDestination": "(let ((left (interp (first args) env))) (let ((right (interp (second args) env))) (match op ((quote +) (if (and (NumV? left) (NumV? right)) (NumV (+ (NumV-n left) (NumV-n right))) (error (quote interp) \\\"ZNQR: Both operands of + must be numeric\\\"))) ((quo...",
            "Result": "failed"
        },
        {
            "NumMutant": 22,
            "MutatorType": "take-second-if",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 129,
            "MutantSourceCol": 2,
            "MutantSource": "(if (equal? (length args) 2) (let ((left (interp (first args) env))) (let ((right (interp (second args) env))) (match op ((quote +) (if (and (NumV? left) (NumV? right)) (NumV (+ (NumV-n left) (NumV-n right))) (error (quote interp) \\\"ZNQR: Both operands o...",
            "MutantDestinationFile": "program3/shuffled-11",
            "MutantDestinationRow": 153,
            "MutantDestinationCol": 6,
            "MutantDestination": "(error (quote interp) \\\"ZNQR: incorrect number of args to binary operator\\\")",
            "Result": "failed"
        },
        {
            "NumMutant": 23,
            "MutatorType": "take-first-if",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 133,
            "MutantSourceCol": 16,
            "MutantSource": "(if (and (NumV? left) (NumV? right)) (NumV (+ (NumV-n left) (NumV-n right))) (error (quote interp) \\\"ZNQR: Both operands of + must be numeric\\\"))",
            "MutantDestinationFile": "program3/shuffled-11",
            "MutantDestinationRow": 134,
            "MutantDestinationCol": 20,
            "MutantDestination": "(NumV (+ (NumV-n left) (NumV-n right)))",
            "Result": "failed"
        },
        {
            "NumMutant": 24,
            "MutatorType": "take-second-if",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 133,
            "MutantSourceCol": 16,
            "MutantSource": "(if (and (NumV? left) (NumV? right)) (NumV (+ (NumV-n left) (NumV-n right))) (error (quote interp) \\\"ZNQR: Both operands of + must be numeric\\\"))",
            "MutantDestinationFile": "program3/shuffled-11",
            "MutantDestinationRow": 135,
            "MutantDestinationCol": 20,
            "MutantDestination": "(error (quote interp) \\\"ZNQR: Both operands of + must be numeric\\\")",
            "Result": "failed"
        },
        {
            "NumMutant": 25,
            "MutatorType": "aod-add",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 134,
            "MutantSourceCol": 26,
            "MutantSource": "(+ (NumV-n left) (NumV-n right))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 21,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin NumV-n left)",
            "Result": "failed"
        },
        {
            "NumMutant": 26,
            "MutatorType": "aod-add",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 134,
            "MutantSourceCol": 26,
            "MutantSource": "(+ (NumV-n left) (NumV-n right))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 21,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin NumV-n right)",
            "Result": "failed"
        },
        {
            "NumMutant": 27,
            "MutatorType": "take-first-if",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 136,
            "MutantSourceCol": 16,
            "MutantSource": "(if (and (NumV? left) (NumV? right)) (if (equal? (NumV-n right) 0) (error (quote interp) \\\"ZNQR: Cannot divide by 0\\\") (NumV (/ (NumV-n left) (NumV-n right)))) (error (quote interp) \\\"ZNQR: Both operands of / must be numeric\\\"))",
            "MutantDestinationFile": "program3/shuffled-11",
            "MutantDestinationRow": 137,
            "MutantDestinationCol": 20,
            "MutantDestination": "(if (equal? (NumV-n right) 0) (error (quote interp) \\\"ZNQR: Cannot divide by 0\\\") (NumV (/ (NumV-n left) (NumV-n right))))",
            "Result": "failed"
        },
        {
            "NumMutant": 28,
            "MutatorType": "take-second-if",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 136,
            "MutantSourceCol": 16,
            "MutantSource": "(if (and (NumV? left) (NumV? right)) (if (equal? (NumV-n right) 0) (error (quote interp) \\\"ZNQR: Cannot divide by 0\\\") (NumV (/ (NumV-n left) (NumV-n right)))) (error (quote interp) \\\"ZNQR: Both operands of / must be numeric\\\"))",
            "MutantDestinationFile": "program3/shuffled-11",
            "MutantDestinationRow": 140,
            "MutantDestinationCol": 20,
            "MutantDestination": "(error (quote interp) \\\"ZNQR: Both operands of / must be numeric\\\")",
            "Result": "failed"
        },
        {
            "NumMutant": 29,
            "MutatorType": "take-first-if",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 137,
            "MutantSourceCol": 20,
            "MutantSource": "(if (equal? (NumV-n right) 0) (error (quote interp) \\\"ZNQR: Cannot divide by 0\\\") (NumV (/ (NumV-n left) (NumV-n right))))",
            "MutantDestinationFile": "program3/shuffled-11",
            "MutantDestinationRow": 138,
            "MutantDestinationCol": 24,
            "MutantDestination": "(error (quote interp) \\\"ZNQR: Cannot divide by 0\\\")",
            "Result": "failed"
        },
        {
            "NumMutant": 30,
            "MutatorType": "take-second-if",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 137,
            "MutantSourceCol": 20,
            "MutantSource": "(if (equal? (NumV-n right) 0) (error (quote interp) \\\"ZNQR: Cannot divide by 0\\\") (NumV (/ (NumV-n left) (NumV-n right))))",
            "MutantDestinationFile": "program3/shuffled-11",
            "MutantDestinationRow": 139,
            "MutantDestinationCol": 24,
            "MutantDestination": "(NumV (/ (NumV-n left) (NumV-n right)))",
            "Result": "failed"
        },
        {
            "NumMutant": 31,
            "MutatorType": "aod-div",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 139,
            "MutantSourceCol": 30,
            "MutantSource": "(/ (NumV-n left) (NumV-n right))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 33,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin NumV-n left)",
            "Result": "failed"
        },
        {
            "NumMutant": 32,
            "MutatorType": "aod-div",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 139,
            "MutantSourceCol": 30,
            "MutantSource": "(/ (NumV-n left) (NumV-n right))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 33,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin NumV-n right)",
            "Result": "failed"
        },
        {
            "NumMutant": 33,
            "MutatorType": "take-first-if",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 141,
            "MutantSourceCol": 16,
            "MutantSource": "(if (and (NumV? left) (NumV? right)) (NumV (* (NumV-n left) (NumV-n right))) (error (quote interp) \\\"ZNQR: Both operands of * must be numeric\\\"))",
            "MutantDestinationFile": "program3/shuffled-11",
            "MutantDestinationRow": 142,
            "MutantDestinationCol": 20,
            "MutantDestination": "(NumV (* (NumV-n left) (NumV-n right)))",
            "Result": "failed"
        },
        {
            "NumMutant": 34,
            "MutatorType": "take-second-if",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 141,
            "MutantSourceCol": 16,
            "MutantSource": "(if (and (NumV? left) (NumV? right)) (NumV (* (NumV-n left) (NumV-n right))) (error (quote interp) \\\"ZNQR: Both operands of * must be numeric\\\"))",
            "MutantDestinationFile": "program3/shuffled-11",
            "MutantDestinationRow": 143,
            "MutantDestinationCol": 20,
            "MutantDestination": "(error (quote interp) \\\"ZNQR: Both operands of * must be numeric\\\")",
            "Result": "failed"
        },
        {
            "NumMutant": 35,
            "MutatorType": "aod-mul",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 142,
            "MutantSourceCol": 26,
            "MutantSource": "(* (NumV-n left) (NumV-n right))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 29,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin NumV-n left)",
            "Result": "failed"
        },
        {
            "NumMutant": 36,
            "MutatorType": "aod-mul",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 142,
            "MutantSourceCol": 26,
            "MutantSource": "(* (NumV-n left) (NumV-n right))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 29,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin NumV-n right)",
            "Result": "failed"
        },
        {
            "NumMutant": 37,
            "MutatorType": "take-first-if",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 144,
            "MutantSourceCol": 16,
            "MutantSource": "(if (and (NumV? left) (NumV? right)) (NumV (- (NumV-n left) (NumV-n right))) (error (quote interp) \\\"ZNQR: Both operands of - must be numeric\\\"))",
            "MutantDestinationFile": "program3/shuffled-11",
            "MutantDestinationRow": 145,
            "MutantDestinationCol": 20,
            "MutantDestination": "(NumV (- (NumV-n left) (NumV-n right)))",
            "Result": "failed"
        },
        {
            "NumMutant": 38,
            "MutatorType": "take-second-if",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 144,
            "MutantSourceCol": 16,
            "MutantSource": "(if (and (NumV? left) (NumV? right)) (NumV (- (NumV-n left) (NumV-n right))) (error (quote interp) \\\"ZNQR: Both operands of - must be numeric\\\"))",
            "MutantDestinationFile": "program3/shuffled-11",
            "MutantDestinationRow": 146,
            "MutantDestinationCol": 20,
            "MutantDestination": "(error (quote interp) \\\"ZNQR: Both operands of - must be numeric\\\")",
            "Result": "failed"
        },
        {
            "NumMutant": 39,
            "MutatorType": "aod-minus",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 145,
            "MutantSourceCol": 26,
            "MutantSource": "(- (NumV-n left) (NumV-n right))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 25,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin NumV-n left)",
            "Result": "failed"
        },
        {
            "NumMutant": 40,
            "MutatorType": "aod-minus",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 145,
            "MutantSourceCol": 26,
            "MutantSource": "(- (NumV-n left) (NumV-n right))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 25,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin NumV-n right)",
            "Result": "failed"
        },
        {
            "NumMutant": 41,
            "MutatorType": "take-first-if",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 147,
            "MutantSourceCol": 17,
            "MutantSource": "(if (and (NumV? left) (NumV? right)) (BoolV (<= (NumV-n left) (NumV-n right))) (error (quote interp) \\\"ZNQR: Both operands of <= must be numeric\\\"))",
            "MutantDestinationFile": "program3/shuffled-11",
            "MutantDestinationRow": 148,
            "MutantDestinationCol": 21,
            "MutantDestination": "(BoolV (<= (NumV-n left) (NumV-n right)))",
            "Result": "failed"
        },
        {
            "NumMutant": 42,
            "MutatorType": "take-second-if",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 147,
            "MutantSourceCol": 17,
            "MutantSource": "(if (and (NumV? left) (NumV? right)) (BoolV (<= (NumV-n left) (NumV-n right))) (error (quote interp) \\\"ZNQR: Both operands of <= must be numeric\\\"))",
            "MutantDestinationFile": "program3/shuffled-11",
            "MutantDestinationRow": 149,
            "MutantDestinationCol": 21,
            "MutantDestination": "(error (quote interp) \\\"ZNQR: Both operands of <= must be numeric\\\")",
            "Result": "failed"
        },
        {
            "NumMutant": 43,
            "MutatorType": "take-first-if",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 150,
            "MutantSourceCol": 21,
            "MutantSource": "(if (or (PrimV? left) (PrimV? right) (ClosV? left) (ClosV? right)) (BoolV #f) (BoolV (equal? left right)))",
            "MutantDestinationFile": "program3/shuffled-11",
            "MutantDestinationRow": 151,
            "MutantDestinationCol": 25,
            "MutantDestination": "(BoolV #f)",
            "Result": "failed"
        },
        {
            "NumMutant": 44,
            "MutatorType": "take-second-if",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 150,
            "MutantSourceCol": 21,
            "MutantSource": "(if (or (PrimV? left) (PrimV? right) (ClosV? left) (ClosV? right)) (BoolV #f) (BoolV (equal? left right)))",
            "MutantDestinationFile": "program3/shuffled-11",
            "MutantDestinationRow": 152,
            "MutantDestinationCol": 25,
            "MutantDestination": "(BoolV (equal? left right))",
            "Result": "failed"
        },
        {
            "NumMutant": 45,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 157,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((empty? env) (error (quote lookup) \\\"ZNQR: name not found: ~e\\\" for)) (else (cond ((symbol=? for (Binding-name (first env))) (Binding-val (first env))) (else (lookup for (rest env))))))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote lookup) \\\"ZNQR: name not found: ~e\\\" for))",
            "Result": "failed"
        },
        {
            "NumMutant": 46,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 157,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((empty? env) (error (quote lookup) \\\"ZNQR: name not found: ~e\\\" for)) (else (cond ((symbol=? for (Binding-name (first env))) (Binding-val (first env))) (else (lookup for (rest env))))))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (cond ((symbol=? for (Binding-name (first env))) (Binding-val (first env))) (else (lookup for (rest env)))))",
            "Result": "failed"
        },
        {
            "NumMutant": 47,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 159,
            "MutantSourceCol": 10,
            "MutantSource": "(cond ((symbol=? for (Binding-name (first env))) (Binding-val (first env))) (else (lookup for (rest env))))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (Binding-val (first env)))",
            "Result": "failed"
        },
        {
            "NumMutant": 48,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 159,
            "MutantSourceCol": 10,
            "MutantSource": "(cond ((symbol=? for (Binding-name (first env))) (Binding-val (first env))) (else (lookup for (rest env))))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (lookup for (rest env)))",
            "Result": "failed"
        },
        {
            "NumMutant": 49,
            "MutatorType": "take-first-if",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 169,
            "MutantSourceCol": 18,
            "MutantSource": "(if bool \\\"true\\\" \\\"false\\\")",
            "MutantDestinationFile": "program3/shuffled-11",
            "MutantDestinationRow": 169,
            "MutantDestinationCol": 27,
            "MutantDestination": "\\\"true\\\"",
            "Result": "failed"
        },
        {
            "NumMutant": 50,
            "MutatorType": "take-second-if",
            "MutantSourceFile": "program3/shuffled-11",
            "MutantSourceRow": 169,
            "MutantSourceCol": 18,
            "MutantSource": "(if bool \\\"true\\\" \\\"false\\\")",
            "MutantDestinationFile": "program3/shuffled-11",
            "MutantDestinationRow": 169,
            "MutantDestinationCol": 34,
            "MutantDestination": "\\\"false\\\"",
            "Result": "failed"
        }
    ],
    "MutationScore": null,
    "TestFile": "program3/shuffled-11.rkt"
}
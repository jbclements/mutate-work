{
    "MutationResults": [
        {
            "NumMutant": 0,
            "MutatorType": "RC-cond->false",
            "MutantSourceFile": "program3/shuffled-05",
            "MutantSourceRow": 57,
            "MutantSourceCol": 8,
            "MutantSource": "(cond ((not (= (length clo-args) (length args))) (error (quote ZNQR) \\\"Wrong number of arguments passed to function\\\")) (else (interp body (extend-env-with-list clo-args args env clo-env))))",
            "MutantDestinationFile": "program3/shuffled-05",
            "MutantDestinationRow": null,
            "MutantDestinationCol": null,
            "MutantDestination": "(cond (#f (error (quote ZNQR) \\\"Wrong number of arguments passed to function\\\")) (else (interp body (extend-env-with-list clo-args args env clo-env))))",
            "Result": "failed"
        },
        {
            "NumMutant": 1,
            "MutatorType": "RC-cond->false",
            "MutantSourceFile": "program3/shuffled-05",
            "MutantSourceRow": 57,
            "MutantSourceCol": 8,
            "MutantSource": "(cond ((not (= (length clo-args) (length args))) (error (quote ZNQR) \\\"Wrong number of arguments passed to function\\\")) (else (interp body (extend-env-with-list clo-args args env clo-env))))",
            "MutantDestinationFile": "program3/shuffled-05",
            "MutantDestinationRow": null,
            "MutantDestinationCol": null,
            "MutantDestination": "(cond ((not (= (length clo-args) (length args))) (error (quote ZNQR) \\\"Wrong number of arguments passed to function\\\")) (#f (interp body (extend-env-with-list clo-args args env clo-env))))",
            "Result": "failed"
        },
        {
            "NumMutant": 2,
            "MutatorType": "RC-cond->true",
            "MutantSourceFile": "program3/shuffled-05",
            "MutantSourceRow": 57,
            "MutantSourceCol": 8,
            "MutantSource": "(cond ((not (= (length clo-args) (length args))) (error (quote ZNQR) \\\"Wrong number of arguments passed to function\\\")) (else (interp body (extend-env-with-list clo-args args env clo-env))))",
            "MutantDestinationFile": "program3/shuffled-05",
            "MutantDestinationRow": null,
            "MutantDestinationCol": null,
            "MutantDestination": "(cond (#t (error (quote ZNQR) \\\"Wrong number of arguments passed to function\\\")) (else (interp body (extend-env-with-list clo-args args env clo-env))))",
            "Result": "failed"
        },
        {
            "NumMutant": 3,
            "MutatorType": "RC-cond->true",
            "MutantSourceFile": "program3/shuffled-05",
            "MutantSourceRow": 57,
            "MutantSourceCol": 8,
            "MutantSource": "(cond ((not (= (length clo-args) (length args))) (error (quote ZNQR) \\\"Wrong number of arguments passed to function\\\")) (else (interp body (extend-env-with-list clo-args args env clo-env))))",
            "MutantDestinationFile": "program3/shuffled-05",
            "MutantDestinationRow": null,
            "MutantDestinationCol": null,
            "MutantDestination": "(cond ((not (= (length clo-args) (length args))) (error (quote ZNQR) \\\"Wrong number of arguments passed to function\\\")) (#t (interp body (extend-env-with-list clo-args args env clo-env))))",
            "Result": "passed"
        },
        {
            "NumMutant": 4,
            "MutatorType": "RC-cond->false",
            "MutantSourceFile": "program3/shuffled-05",
            "MutantSourceRow": 82,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((empty? clo-args) clo-env) (else (cast args (Listof ExprC)) (define new-env (extend-env clo-env (first clo-args) (interp (first args) env))) (extend-env-with-list (rest clo-args) (rest args) env new-env)))",
            "MutantDestinationFile": "program3/shuffled-05",
            "MutantDestinationRow": null,
            "MutantDestinationCol": null,
            "MutantDestination": "(cond (#f clo-env) (else (cast args (Listof ExprC)) (define new-env (extend-env clo-env (first clo-args) (interp (first args) env))) (extend-env-with-list (rest clo-args) (rest args) env new-env)))",
            "Result": "failed"
        },
        {
            "NumMutant": 5,
            "MutatorType": "RC-cond->false",
            "MutantSourceFile": "program3/shuffled-05",
            "MutantSourceRow": 82,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((empty? clo-args) clo-env) (else (cast args (Listof ExprC)) (define new-env (extend-env clo-env (first clo-args) (interp (first args) env))) (extend-env-with-list (rest clo-args) (rest args) env new-env)))",
            "MutantDestinationFile": "program3/shuffled-05",
            "MutantDestinationRow": null,
            "MutantDestinationCol": null,
            "MutantDestination": "(cond ((empty? clo-args) clo-env) (#f (cast args (Listof ExprC))))",
            "Result": "failed"
        },
        {
            "NumMutant": 6,
            "MutatorType": "RC-cond->true",
            "MutantSourceFile": "program3/shuffled-05",
            "MutantSourceRow": 82,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((empty? clo-args) clo-env) (else (cast args (Listof ExprC)) (define new-env (extend-env clo-env (first clo-args) (interp (first args) env))) (extend-env-with-list (rest clo-args) (rest args) env new-env)))",
            "MutantDestinationFile": "program3/shuffled-05",
            "MutantDestinationRow": null,
            "MutantDestinationCol": null,
            "MutantDestination": "(cond (#t clo-env) (else (cast args (Listof ExprC)) (define new-env (extend-env clo-env (first clo-args) (interp (first args) env))) (extend-env-with-list (rest clo-args) (rest args) env new-env)))",
            "Result": "failed"
        },
        {
            "NumMutant": 7,
            "MutatorType": "RC-cond->true",
            "MutantSourceFile": "program3/shuffled-05",
            "MutantSourceRow": 82,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((empty? clo-args) clo-env) (else (cast args (Listof ExprC)) (define new-env (extend-env clo-env (first clo-args) (interp (first args) env))) (extend-env-with-list (rest clo-args) (rest args) env new-env)))",
            "MutantDestinationFile": "program3/shuffled-05",
            "MutantDestinationRow": null,
            "MutantDestinationCol": null,
            "MutantDestination": "(cond ((empty? clo-args) clo-env) (#t (cast args (Listof ExprC))))",
            "Result": "failed"
        },
        {
            "NumMutant": 8,
            "MutatorType": "aod-add",
            "MutantSourceFile": "program3/shuffled-05",
            "MutantSourceRow": 105,
            "MutantSourceCol": 14,
            "MutantSource": "(+ n1 n2)",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 53,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin . n1)",
            "Result": "failed"
        },
        {
            "NumMutant": 9,
            "MutatorType": "aod-add",
            "MutantSourceFile": "program3/shuffled-05",
            "MutantSourceRow": 105,
            "MutantSourceCol": 14,
            "MutantSource": "(+ n1 n2)",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 53,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin . n2)",
            "Result": "failed"
        },
        {
            "NumMutant": 10,
            "MutatorType": "aod-minus",
            "MutantSourceFile": "program3/shuffled-05",
            "MutantSourceRow": 106,
            "MutantSourceCol": 14,
            "MutantSource": "(- n1 n2)",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 57,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin . n1)",
            "Result": "failed"
        },
        {
            "NumMutant": 11,
            "MutatorType": "aod-minus",
            "MutantSourceFile": "program3/shuffled-05",
            "MutantSourceRow": 106,
            "MutantSourceCol": 14,
            "MutantSource": "(- n1 n2)",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 57,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin . n2)",
            "Result": "failed"
        },
        {
            "NumMutant": 12,
            "MutatorType": "aod-mul",
            "MutantSourceFile": "program3/shuffled-05",
            "MutantSourceRow": 107,
            "MutantSourceCol": 14,
            "MutantSource": "(* n1 n2)",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 61,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin . n1)",
            "Result": "failed"
        },
        {
            "NumMutant": 13,
            "MutatorType": "aod-mul",
            "MutantSourceFile": "program3/shuffled-05",
            "MutantSourceRow": 107,
            "MutantSourceCol": 14,
            "MutantSource": "(* n1 n2)",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 61,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin . n2)",
            "Result": "failed"
        },
        {
            "NumMutant": 14,
            "MutatorType": "RC-if->false",
            "MutantSourceFile": "program3/shuffled-05",
            "MutantSourceRow": 108,
            "MutantSourceCol": 8,
            "MutantSource": "(if (= n2 0) (error (quote ZNQR) \\\"Divide by zero error\\\") (NumV (/ n1 n2)))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 90,
            "MutantDestinationCol": 10,
            "MutantDestination": "(if #f (error (quote ZNQR) \\\"Divide by zero error\\\") (NumV (/ n1 n2)))",
            "Result": "failed"
        },
        {
            "NumMutant": 15,
            "MutatorType": "RC-if->true",
            "MutantSourceFile": "program3/shuffled-05",
            "MutantSourceRow": 108,
            "MutantSourceCol": 8,
            "MutantSource": "(if (= n2 0) (error (quote ZNQR) \\\"Divide by zero error\\\") (NumV (/ n1 n2)))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 93,
            "MutantDestinationCol": 10,
            "MutantDestination": "(if #t (error (quote ZNQR) \\\"Divide by zero error\\\") (NumV (/ n1 n2)))",
            "Result": "failed"
        },
        {
            "NumMutant": 16,
            "MutatorType": "aod-div",
            "MutantSourceFile": "program3/shuffled-05",
            "MutantSourceRow": 110,
            "MutantSourceCol": 18,
            "MutantSource": "(/ n1 n2)",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 65,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin . n1)",
            "Result": "failed"
        },
        {
            "NumMutant": 17,
            "MutatorType": "aod-div",
            "MutantSourceFile": "program3/shuffled-05",
            "MutantSourceRow": 110,
            "MutantSourceCol": 18,
            "MutantSource": "(/ n1 n2)",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 65,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin . n2)",
            "Result": "failed"
        },
        {
            "NumMutant": 18,
            "MutatorType": "RC-if->false",
            "MutantSourceFile": "program3/shuffled-05",
            "MutantSourceRow": 125,
            "MutantSourceCol": 5,
            "MutantSource": "(if b (interp exp1 env) (interp exp2 env))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 90,
            "MutantDestinationCol": 10,
            "MutantDestination": "(if #f (interp exp1 env) (interp exp2 env))",
            "Result": "failed"
        },
        {
            "NumMutant": 19,
            "MutatorType": "RC-if->true",
            "MutantSourceFile": "program3/shuffled-05",
            "MutantSourceRow": 125,
            "MutantSourceCol": 5,
            "MutantSource": "(if b (interp exp1 env) (interp exp2 env))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 93,
            "MutantDestinationCol": 10,
            "MutantDestination": "(if #t (interp exp1 env) (interp exp2 env))",
            "Result": "failed"
        },
        {
            "NumMutant": 20,
            "MutatorType": "RC-if->false",
            "MutantSourceFile": "program3/shuffled-05",
            "MutantSourceRow": 133,
            "MutantSourceCol": 15,
            "MutantSource": "(if (equal? v #t) \\\"true\\\" \\\"false\\\")",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 90,
            "MutantDestinationCol": 10,
            "MutantDestination": "(if #f \\\"true\\\" \\\"false\\\")",
            "Result": "failed"
        },
        {
            "NumMutant": 21,
            "MutatorType": "RC-if->true",
            "MutantSourceFile": "program3/shuffled-05",
            "MutantSourceRow": 133,
            "MutantSourceCol": 15,
            "MutantSource": "(if (equal? v #t) \\\"true\\\" \\\"false\\\")",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 93,
            "MutantDestinationCol": 10,
            "MutantDestination": "(if #t \\\"true\\\" \\\"false\\\")",
            "Result": "failed"
        },
        {
            "NumMutant": 22,
            "MutatorType": "RC-cond->false",
            "MutantSourceFile": "program3/shuffled-05",
            "MutantSourceRow": 173,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((hash-has-key? reserved-ids sym) (error (quote ZNQR) \\\"Reserved symbol used\\\")) (else sym))",
            "MutantDestinationFile": "program3/shuffled-05",
            "MutantDestinationRow": null,
            "MutantDestinationCol": null,
            "MutantDestination": "(cond (#f (error (quote ZNQR) \\\"Reserved symbol used\\\")) (else sym))",
            "Result": "failed"
        },
        {
            "NumMutant": 23,
            "MutatorType": "RC-cond->false",
            "MutantSourceFile": "program3/shuffled-05",
            "MutantSourceRow": 173,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((hash-has-key? reserved-ids sym) (error (quote ZNQR) \\\"Reserved symbol used\\\")) (else sym))",
            "MutantDestinationFile": "program3/shuffled-05",
            "MutantDestinationRow": null,
            "MutantDestinationCol": null,
            "MutantDestination": "(cond ((hash-has-key? reserved-ids sym) (error (quote ZNQR) \\\"Reserved symbol used\\\")) (#f sym))",
            "Result": "failed"
        },
        {
            "NumMutant": 24,
            "MutatorType": "RC-cond->true",
            "MutantSourceFile": "program3/shuffled-05",
            "MutantSourceRow": 173,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((hash-has-key? reserved-ids sym) (error (quote ZNQR) \\\"Reserved symbol used\\\")) (else sym))",
            "MutantDestinationFile": "program3/shuffled-05",
            "MutantDestinationRow": null,
            "MutantDestinationCol": null,
            "MutantDestination": "(cond (#t (error (quote ZNQR) \\\"Reserved symbol used\\\")) (else sym))",
            "Result": "failed"
        },
        {
            "NumMutant": 25,
            "MutatorType": "RC-cond->true",
            "MutantSourceFile": "program3/shuffled-05",
            "MutantSourceRow": 173,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((hash-has-key? reserved-ids sym) (error (quote ZNQR) \\\"Reserved symbol used\\\")) (else sym))",
            "MutantDestinationFile": "program3/shuffled-05",
            "MutantDestinationRow": null,
            "MutantDestinationCol": null,
            "MutantDestination": "(cond ((hash-has-key? reserved-ids sym) (error (quote ZNQR) \\\"Reserved symbol used\\\")) (#t sym))",
            "Result": "passed"
        },
        {
            "NumMutant": 26,
            "MutatorType": "RC-cond->false",
            "MutantSourceFile": "program3/shuffled-05",
            "MutantSourceRow": 181,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((not (not (check-duplicates args))) (error (quote ZNQR) \\\"Duplicate argument found\\\")) (else (map test-symbol args)))",
            "MutantDestinationFile": "program3/shuffled-05",
            "MutantDestinationRow": null,
            "MutantDestinationCol": null,
            "MutantDestination": "(cond (#f (error (quote ZNQR) \\\"Duplicate argument found\\\")) (else (map test-symbol args)))",
            "Result": "failed"
        },
        {
            "NumMutant": 27,
            "MutatorType": "RC-cond->false",
            "MutantSourceFile": "program3/shuffled-05",
            "MutantSourceRow": 181,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((not (not (check-duplicates args))) (error (quote ZNQR) \\\"Duplicate argument found\\\")) (else (map test-symbol args)))",
            "MutantDestinationFile": "program3/shuffled-05",
            "MutantDestinationRow": null,
            "MutantDestinationCol": null,
            "MutantDestination": "(cond ((not (not (check-duplicates args))) (error (quote ZNQR) \\\"Duplicate argument found\\\")) (#f (map test-symbol args)))",
            "Result": "failed"
        },
        {
            "NumMutant": 28,
            "MutatorType": "RC-cond->true",
            "MutantSourceFile": "program3/shuffled-05",
            "MutantSourceRow": 181,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((not (not (check-duplicates args))) (error (quote ZNQR) \\\"Duplicate argument found\\\")) (else (map test-symbol args)))",
            "MutantDestinationFile": "program3/shuffled-05",
            "MutantDestinationRow": null,
            "MutantDestinationCol": null,
            "MutantDestination": "(cond (#t (error (quote ZNQR) \\\"Duplicate argument found\\\")) (else (map test-symbol args)))",
            "Result": "failed"
        },
        {
            "NumMutant": 29,
            "MutatorType": "RC-cond->true",
            "MutantSourceFile": "program3/shuffled-05",
            "MutantSourceRow": 181,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((not (not (check-duplicates args))) (error (quote ZNQR) \\\"Duplicate argument found\\\")) (else (map test-symbol args)))",
            "MutantDestinationFile": "program3/shuffled-05",
            "MutantDestinationRow": null,
            "MutantDestinationCol": null,
            "MutantDestination": "(cond ((not (not (check-duplicates args))) (error (quote ZNQR) \\\"Duplicate argument found\\\")) (#t (map test-symbol args)))",
            "Result": "passed"
        },
        {
            "NumMutant": 30,
            "MutatorType": "RC-or->false",
            "MutantSourceFile": "program3/shuffled-05",
            "MutantSourceRow": 190,
            "MutantSourceCol": 22,
            "MutantSource": "(or #t)",
            "MutantDestinationFile": "program3/shuffled-05",
            "MutantDestinationRow": null,
            "MutantDestinationCol": null,
            "MutantDestination": "(or #f)",
            "Result": "passed"
        }
    ],
    "MutationScore": 0.870968,
    "TestFile": "program3/shuffled-05.rkt"
}
{
    "MutationResults": [
        {
            "NumMutant": 0,
            "MutatorType": "take-first-if",
            "MutantSourceFile": "program3/shuffled-14",
            "MutantSourceRow": 50,
            "MutantSourceCol": 8,
            "MutantSource": "(if (BooleanV? condition) (if (BooleanV-b condition) (interp thenExpr env) (interp elseExpr env)) (error (string-append \\\"ZNQR: Not a boolean: \\\" (~v condition))))",
            "MutantDestinationFile": "program3/shuffled-14",
            "MutantDestinationRow": 51,
            "MutantDestinationCol": 10,
            "MutantDestination": "(if (BooleanV-b condition) (interp thenExpr env) (interp elseExpr env))",
            "Result": "failed"
        },
        {
            "NumMutant": 1,
            "MutatorType": "take-second-if",
            "MutantSourceFile": "program3/shuffled-14",
            "MutantSourceRow": 50,
            "MutantSourceCol": 8,
            "MutantSource": "(if (BooleanV? condition) (if (BooleanV-b condition) (interp thenExpr env) (interp elseExpr env)) (error (string-append \\\"ZNQR: Not a boolean: \\\" (~v condition))))",
            "MutantDestinationFile": "program3/shuffled-14",
            "MutantDestinationRow": 52,
            "MutantDestinationCol": 10,
            "MutantDestination": "(error (string-append \\\"ZNQR: Not a boolean: \\\" (~v condition)))",
            "Result": "failed"
        },
        {
            "NumMutant": 2,
            "MutatorType": "take-first-if",
            "MutantSourceFile": "program3/shuffled-14",
            "MutantSourceRow": 51,
            "MutantSourceCol": 10,
            "MutantSource": "(if (BooleanV-b condition) (interp thenExpr env) (interp elseExpr env))",
            "MutantDestinationFile": "program3/shuffled-14",
            "MutantDestinationRow": 51,
            "MutantDestinationCol": 37,
            "MutantDestination": "(interp thenExpr env)",
            "Result": "failed"
        },
        {
            "NumMutant": 3,
            "MutatorType": "take-second-if",
            "MutantSourceFile": "program3/shuffled-14",
            "MutantSourceRow": 51,
            "MutantSourceCol": 10,
            "MutantSource": "(if (BooleanV-b condition) (interp thenExpr env) (interp elseExpr env))",
            "MutantDestinationFile": "program3/shuffled-14",
            "MutantDestinationRow": 51,
            "MutantDestinationCol": 59,
            "MutantDestination": "(interp elseExpr env)",
            "Result": "failed"
        },
        {
            "NumMutant": 4,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-14",
            "MutantSourceRow": 72,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((is-variable? s) (IdC (cast s Symbol))) ((real? s) (RealC s)) ((string? s) (StringC s)) ((and (list? s) (equal? (length s) 4) (equal? (first s) (quote if))) (let ((condition : ExprC (parse (second s))) (thenBranch : ExprC (parse (third s))) (else...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (IdC (cast s Symbol)))",
            "Result": "failed"
        },
        {
            "NumMutant": 5,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-14",
            "MutantSourceRow": 72,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((is-variable? s) (IdC (cast s Symbol))) ((real? s) (RealC s)) ((string? s) (StringC s)) ((and (list? s) (equal? (length s) 4) (equal? (first s) (quote if))) (let ((condition : ExprC (parse (second s))) (thenBranch : ExprC (parse (third s))) (else...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (RealC s))",
            "Result": "failed"
        },
        {
            "NumMutant": 6,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-14",
            "MutantSourceRow": 72,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((is-variable? s) (IdC (cast s Symbol))) ((real? s) (RealC s)) ((string? s) (StringC s)) ((and (list? s) (equal? (length s) 4) (equal? (first s) (quote if))) (let ((condition : ExprC (parse (second s))) (thenBranch : ExprC (parse (third s))) (else...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (StringC s))",
            "Result": "failed"
        },
        {
            "NumMutant": 7,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-14",
            "MutantSourceRow": 72,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((is-variable? s) (IdC (cast s Symbol))) ((real? s) (RealC s)) ((string? s) (StringC s)) ((and (list? s) (equal? (length s) 4) (equal? (first s) (quote if))) (let ((condition : ExprC (parse (second s))) (thenBranch : ExprC (parse (third s))) (else...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (let ((condition : ExprC (parse (second s))) (thenBranch : ExprC (parse (third s))) (elseBranch : ExprC (parse (fourth s)))) (IfC condition thenBranch elseBranch)))",
            "Result": "failed"
        },
        {
            "NumMutant": 8,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-14",
            "MutantSourceRow": 72,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((is-variable? s) (IdC (cast s Symbol))) ((real? s) (RealC s)) ((string? s) (StringC s)) ((and (list? s) (equal? (length s) 4) (equal? (first s) (quote if))) (let ((condition : ExprC (parse (second s))) (thenBranch : ExprC (parse (third s))) (else...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (LamC (parse-params (cast (first s) (Listof Sexp))) (parse (third s))))",
            "Result": "failed"
        },
        {
            "NumMutant": 9,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-14",
            "MutantSourceRow": 72,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((is-variable? s) (IdC (cast s Symbol))) ((real? s) (RealC s)) ((string? s) (StringC s)) ((and (list? s) (equal? (length s) 4) (equal? (first s) (quote if))) (let ((condition : ExprC (parse (second s))) (thenBranch : ExprC (parse (third s))) (else...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (match s ((list (quote var) (list params (quote =) argExprs) ... body) (AppC (LamC (parse-params (cast params (Listof Sexp))) (parse body)) ((inst map ExprC Sexp) parse (cast argExprs (Listof Sexp))))) (else (error (string-append \\\"ZNQR: invalid v...",
            "Result": "failed"
        },
        {
            "NumMutant": 10,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-14",
            "MutantSourceRow": 72,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((is-variable? s) (IdC (cast s Symbol))) ((real? s) (RealC s)) ((string? s) (StringC s)) ((and (list? s) (equal? (length s) 4) (equal? (first s) (quote if))) (let ((condition : ExprC (parse (second s))) (thenBranch : ExprC (parse (third s))) (else...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (let ((firstExpr : ExprC (parse (first s))) (argsExpr : (Listof ExprC) (map parse (rest s)))) (if (and (LamC? firstExpr) (not (equal? (length (LamC-params firstExpr)) (length argsExpr)))) (error (string-append \\\"ZNQR: bad number of arguments for l...",
            "Result": "failed"
        },
        {
            "NumMutant": 11,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-14",
            "MutantSourceRow": 72,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((is-variable? s) (IdC (cast s Symbol))) ((real? s) (RealC s)) ((string? s) (StringC s)) ((and (list? s) (equal? (length s) 4) (equal? (first s) (quote if))) (let ((condition : ExprC (parse (second s))) (thenBranch : ExprC (parse (third s))) (else...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (string-append \\\"ZNQR: Bad input: \\\" (~v s))))",
            "Result": "failed"
        },
        {
            "NumMutant": 12,
            "MutatorType": "take-first-if",
            "MutantSourceFile": "program3/shuffled-14",
            "MutantSourceRow": 98,
            "MutantSourceCol": 8,
            "MutantSource": "(if (and (LamC? firstExpr) (not (equal? (length (LamC-params firstExpr)) (length argsExpr)))) (error (string-append \\\"ZNQR: bad number of arguments for lambda: \\\" (~v s))) (AppC firstExpr argsExpr))",
            "MutantDestinationFile": "program3/shuffled-14",
            "MutantDestinationRow": 102,
            "MutantDestinationCol": 10,
            "MutantDestination": "(error (string-append \\\"ZNQR: bad number of arguments for lambda: \\\" (~v s)))",
            "Result": "failed"
        },
        {
            "NumMutant": 13,
            "MutatorType": "take-second-if",
            "MutantSourceFile": "program3/shuffled-14",
            "MutantSourceRow": 98,
            "MutantSourceCol": 8,
            "MutantSource": "(if (and (LamC? firstExpr) (not (equal? (length (LamC-params firstExpr)) (length argsExpr)))) (error (string-append \\\"ZNQR: bad number of arguments for lambda: \\\" (~v s))) (AppC firstExpr argsExpr))",
            "MutantDestinationFile": "program3/shuffled-14",
            "MutantDestinationRow": 103,
            "MutantDestinationCol": 10,
            "MutantDestination": "(AppC firstExpr argsExpr)",
            "Result": "failed"
        },
        {
            "NumMutant": 14,
            "MutatorType": "take-first-if",
            "MutantSourceFile": "program3/shuffled-14",
            "MutantSourceRow": 135,
            "MutantSourceCol": 2,
            "MutantSource": "(if (check-duplicates params) (error (string-append \\\"ZNQR: duplicate parameters: \\\" (~v params))) (if (andmap is-variable? params) (cast params (Listof Symbol)) (error (string-append \\\"ZNQR: bad parameters: \\\" (~v params)))))",
            "MutantDestinationFile": "program3/shuffled-14",
            "MutantDestinationRow": 136,
            "MutantDestinationCol": 4,
            "MutantDestination": "(error (string-append \\\"ZNQR: duplicate parameters: \\\" (~v params)))",
            "Result": "failed"
        },
        {
            "NumMutant": 15,
            "MutatorType": "take-second-if",
            "MutantSourceFile": "program3/shuffled-14",
            "MutantSourceRow": 135,
            "MutantSourceCol": 2,
            "MutantSource": "(if (check-duplicates params) (error (string-append \\\"ZNQR: duplicate parameters: \\\" (~v params))) (if (andmap is-variable? params) (cast params (Listof Symbol)) (error (string-append \\\"ZNQR: bad parameters: \\\" (~v params)))))",
            "MutantDestinationFile": "program3/shuffled-14",
            "MutantDestinationRow": 137,
            "MutantDestinationCol": 4,
            "MutantDestination": "(if (andmap is-variable? params) (cast params (Listof Symbol)) (error (string-append \\\"ZNQR: bad parameters: \\\" (~v params))))",
            "Result": "failed"
        },
        {
            "NumMutant": 16,
            "MutatorType": "take-first-if",
            "MutantSourceFile": "program3/shuffled-14",
            "MutantSourceRow": 137,
            "MutantSourceCol": 4,
            "MutantSource": "(if (andmap is-variable? params) (cast params (Listof Symbol)) (error (string-append \\\"ZNQR: bad parameters: \\\" (~v params))))",
            "MutantDestinationFile": "program3/shuffled-14",
            "MutantDestinationRow": 139,
            "MutantDestinationCol": 6,
            "MutantDestination": "(cast params (Listof Symbol))",
            "Result": "failed"
        },
        {
            "NumMutant": 17,
            "MutatorType": "take-second-if",
            "MutantSourceFile": "program3/shuffled-14",
            "MutantSourceRow": 137,
            "MutantSourceCol": 4,
            "MutantSource": "(if (andmap is-variable? params) (cast params (Listof Symbol)) (error (string-append \\\"ZNQR: bad parameters: \\\" (~v params))))",
            "MutantDestinationFile": "program3/shuffled-14",
            "MutantDestinationRow": 140,
            "MutantDestinationCol": 6,
            "MutantDestination": "(error (string-append \\\"ZNQR: bad parameters: \\\" (~v params)))",
            "Result": "failed"
        },
        {
            "NumMutant": 18,
            "MutatorType": "take-first-if",
            "MutantSourceFile": "program3/shuffled-14",
            "MutantSourceRow": 145,
            "MutantSourceCol": 2,
            "MutantSource": "(if (and (RealV? l) (RealV? r)) (RealV (op (RealV-d l) (RealV-d r))) (error (string-append \\\"ZNQR: unexpected left or right argument for arithmetic binop: \\\" (~v l) \\\", \\\" (~v r))))",
            "MutantDestinationFile": "program3/shuffled-14",
            "MutantDestinationRow": 147,
            "MutantDestinationCol": 4,
            "MutantDestination": "(RealV (op (RealV-d l) (RealV-d r)))",
            "Result": "failed"
        },
        {
            "NumMutant": 19,
            "MutatorType": "take-second-if",
            "MutantSourceFile": "program3/shuffled-14",
            "MutantSourceRow": 145,
            "MutantSourceCol": 2,
            "MutantSource": "(if (and (RealV? l) (RealV? r)) (RealV (op (RealV-d l) (RealV-d r))) (error (string-append \\\"ZNQR: unexpected left or right argument for arithmetic binop: \\\" (~v l) \\\", \\\" (~v r))))",
            "MutantDestinationFile": "program3/shuffled-14",
            "MutantDestinationRow": 148,
            "MutantDestinationCol": 4,
            "MutantDestination": "(error (string-append \\\"ZNQR: unexpected left or right argument for arithmetic binop: \\\" (~v l) \\\", \\\" (~v r)))",
            "Result": "failed"
        },
        {
            "NumMutant": 20,
            "MutatorType": "take-first-if",
            "MutantSourceFile": "program3/shuffled-14",
            "MutantSourceRow": 153,
            "MutantSourceCol": 2,
            "MutantSource": "(if (and (RealV? b) (zero? (RealV-d b))) (error \\\"ZNQR: Division by zero\\\") (apply-arithmetic / a b))",
            "MutantDestinationFile": "program3/shuffled-14",
            "MutantDestinationRow": 155,
            "MutantDestinationCol": 4,
            "MutantDestination": "(error \\\"ZNQR: Division by zero\\\")",
            "Result": "failed"
        },
        {
            "NumMutant": 21,
            "MutatorType": "take-second-if",
            "MutantSourceFile": "program3/shuffled-14",
            "MutantSourceRow": 153,
            "MutantSourceCol": 2,
            "MutantSource": "(if (and (RealV? b) (zero? (RealV-d b))) (error \\\"ZNQR: Division by zero\\\") (apply-arithmetic / a b))",
            "MutantDestinationFile": "program3/shuffled-14",
            "MutantDestinationRow": 156,
            "MutantDestinationCol": 4,
            "MutantDestination": "(apply-arithmetic / a b)",
            "Result": "failed"
        },
        {
            "NumMutant": 22,
            "MutatorType": "take-first-if",
            "MutantSourceFile": "program3/shuffled-14",
            "MutantSourceRow": 158,
            "MutantSourceCol": 2,
            "MutantSource": "(if (and (RealV? a) (RealV? b)) (BooleanV (<= (RealV-d a) (RealV-d b))) (error (string-append \\\"ZNQR: Bad type for leq parameters: \\\" (~v (list a b)))))",
            "MutantDestinationFile": "program3/shuffled-14",
            "MutantDestinationRow": 160,
            "MutantDestinationCol": 4,
            "MutantDestination": "(BooleanV (<= (RealV-d a) (RealV-d b)))",
            "Result": "failed"
        },
        {
            "NumMutant": 23,
            "MutatorType": "take-second-if",
            "MutantSourceFile": "program3/shuffled-14",
            "MutantSourceRow": 158,
            "MutantSourceCol": 2,
            "MutantSource": "(if (and (RealV? a) (RealV? b)) (BooleanV (<= (RealV-d a) (RealV-d b))) (error (string-append \\\"ZNQR: Bad type for leq parameters: \\\" (~v (list a b)))))",
            "MutantDestinationFile": "program3/shuffled-14",
            "MutantDestinationRow": 161,
            "MutantDestinationCol": 4,
            "MutantDestination": "(error (string-append \\\"ZNQR: Bad type for leq parameters: \\\" (~v (list a b))))",
            "Result": "failed"
        },
        {
            "NumMutant": 24,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-14",
            "MutantSourceRow": 163,
            "MutantSourceCol": 26,
            "MutantSource": "(cond ((and (RealV? a) (RealV? b)) (equal? (RealV-d a) (RealV-d b))) ((and (StringV? a) (StringV? b)) (equal? (StringV-s a) (StringV-s b))) ((and (BooleanV? a) (BooleanV? b)) (equal? (BooleanV-b a) (BooleanV-b b))) (else #f))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (equal? (RealV-d a) (RealV-d b)))",
            "Result": "failed"
        },
        {
            "NumMutant": 25,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-14",
            "MutantSourceRow": 163,
            "MutantSourceCol": 26,
            "MutantSource": "(cond ((and (RealV? a) (RealV? b)) (equal? (RealV-d a) (RealV-d b))) ((and (StringV? a) (StringV? b)) (equal? (StringV-s a) (StringV-s b))) ((and (BooleanV? a) (BooleanV? b)) (equal? (BooleanV-b a) (BooleanV-b b))) (else #f))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (equal? (StringV-s a) (StringV-s b)))",
            "Result": "failed"
        },
        {
            "NumMutant": 26,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-14",
            "MutantSourceRow": 163,
            "MutantSourceCol": 26,
            "MutantSource": "(cond ((and (RealV? a) (RealV? b)) (equal? (RealV-d a) (RealV-d b))) ((and (StringV? a) (StringV? b)) (equal? (StringV-s a) (StringV-s b))) ((and (BooleanV? a) (BooleanV? b)) (equal? (BooleanV-b a) (BooleanV-b b))) (else #f))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (equal? (BooleanV-b a) (BooleanV-b b)))",
            "Result": "failed"
        },
        {
            "NumMutant": 27,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-14",
            "MutantSourceRow": 163,
            "MutantSourceCol": 26,
            "MutantSource": "(cond ((and (RealV? a) (RealV? b)) (equal? (RealV-d a) (RealV-d b))) ((and (StringV? a) (StringV? b)) (equal? (StringV-s a) (StringV-s b))) ((and (BooleanV? a) (BooleanV? b)) (equal? (BooleanV-b a) (BooleanV-b b))) (else #f))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin #f)",
            "Result": "failed"
        }
    ],
    "MutationScore": null,
    "TestFile": "program3/shuffled-14.rkt"
}
{
    "MutationResults": [
        {
            "NumMutant": 0,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-17",
            "MutantSourceRow": 42,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((hash-has-key? binaryOps sym) (BinopC sym (parse (second s)) (parse (third s)))) ((symbol=? sym (quote ifleq0)) (error (quote parse) \\\"ZNQR: if-then-else takes exactly 3 args\\\")) ((symbol=? sym (quote func)) (error (quote parse) \\\"ZNQR: can't define...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (BinopC sym (parse (second s)) (parse (third s))))",
            "Result": "failed"
        },
        {
            "NumMutant": 1,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-17",
            "MutantSourceRow": 42,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((hash-has-key? binaryOps sym) (BinopC sym (parse (second s)) (parse (third s)))) ((symbol=? sym (quote ifleq0)) (error (quote parse) \\\"ZNQR: if-then-else takes exactly 3 args\\\")) ((symbol=? sym (quote func)) (error (quote parse) \\\"ZNQR: can't define...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote parse) \\\"ZNQR: if-then-else takes exactly 3 args\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 2,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-17",
            "MutantSourceRow": 42,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((hash-has-key? binaryOps sym) (BinopC sym (parse (second s)) (parse (third s)))) ((symbol=? sym (quote ifleq0)) (error (quote parse) \\\"ZNQR: if-then-else takes exactly 3 args\\\")) ((symbol=? sym (quote func)) (error (quote parse) \\\"ZNQR: can't define...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote parse) \\\"ZNQR: can't define functions inside expressions\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 3,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-17",
            "MutantSourceRow": 42,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((hash-has-key? binaryOps sym) (BinopC sym (parse (second s)) (parse (third s)))) ((symbol=? sym (quote ifleq0)) (error (quote parse) \\\"ZNQR: if-then-else takes exactly 3 args\\\")) ((symbol=? sym (quote func)) (error (quote parse) \\\"ZNQR: can't define...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (AppC sym (map parse (list l r))))",
            "Result": "failed"
        },
        {
            "NumMutant": 4,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-17",
            "MutantSourceRow": 47,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((hash-has-key? binaryOps fun) (error (quote parse) \\\"ZNQR: Binary Operations take exactly 2 args\\\")) ((symbol=? fun (quote ifleq0)) (error (quote parse) \\\"ZNQR: if-then-else takes exactly 3 args\\\")) ((symbol=? fun (quote func)) (error (quote parse) \\\"...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote parse) \\\"ZNQR: Binary Operations take exactly 2 args\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 5,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-17",
            "MutantSourceRow": 47,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((hash-has-key? binaryOps fun) (error (quote parse) \\\"ZNQR: Binary Operations take exactly 2 args\\\")) ((symbol=? fun (quote ifleq0)) (error (quote parse) \\\"ZNQR: if-then-else takes exactly 3 args\\\")) ((symbol=? fun (quote func)) (error (quote parse) \\\"...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote parse) \\\"ZNQR: if-then-else takes exactly 3 args\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 6,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-17",
            "MutantSourceRow": 47,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((hash-has-key? binaryOps fun) (error (quote parse) \\\"ZNQR: Binary Operations take exactly 2 args\\\")) ((symbol=? fun (quote ifleq0)) (error (quote parse) \\\"ZNQR: if-then-else takes exactly 3 args\\\")) ((symbol=? fun (quote func)) (error (quote parse) \\\"...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote parse) \\\"ZNQR: can't define functions inside expressions\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 7,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-17",
            "MutantSourceRow": 47,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((hash-has-key? binaryOps fun) (error (quote parse) \\\"ZNQR: Binary Operations take exactly 2 args\\\")) ((symbol=? fun (quote ifleq0)) (error (quote parse) \\\"ZNQR: if-then-else takes exactly 3 args\\\")) ((symbol=? fun (quote func)) (error (quote parse) \\\"...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (AppC fun (map parse rst)))",
            "Result": "failed"
        },
        {
            "NumMutant": 8,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-17",
            "MutantSourceRow": 52,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((hash-has-key? binaryOps s) (error (quote parse) \\\"ZNQR: Identifiers cannot be Binary Operaters\\\")) ((symbol=? s (quote ifleq0)) (error (quote parse) \\\"ZNQR: if-then-else takes exactly 3 args\\\")) ((symbol=? s (quote func)) (error (quote parse) \\\"ZNQR:...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote parse) \\\"ZNQR: Identifiers cannot be Binary Operaters\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 9,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-17",
            "MutantSourceRow": 52,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((hash-has-key? binaryOps s) (error (quote parse) \\\"ZNQR: Identifiers cannot be Binary Operaters\\\")) ((symbol=? s (quote ifleq0)) (error (quote parse) \\\"ZNQR: if-then-else takes exactly 3 args\\\")) ((symbol=? s (quote func)) (error (quote parse) \\\"ZNQR:...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote parse) \\\"ZNQR: if-then-else takes exactly 3 args\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 10,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-17",
            "MutantSourceRow": 52,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((hash-has-key? binaryOps s) (error (quote parse) \\\"ZNQR: Identifiers cannot be Binary Operaters\\\")) ((symbol=? s (quote ifleq0)) (error (quote parse) \\\"ZNQR: if-then-else takes exactly 3 args\\\")) ((symbol=? s (quote func)) (error (quote parse) \\\"ZNQR:...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote parse) \\\"ZNQR: can't define functions inside expressions\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 11,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-17",
            "MutantSourceRow": 52,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((hash-has-key? binaryOps s) (error (quote parse) \\\"ZNQR: Identifiers cannot be Binary Operaters\\\")) ((symbol=? s (quote ifleq0)) (error (quote parse) \\\"ZNQR: if-then-else takes exactly 3 args\\\")) ((symbol=? s (quote func)) (error (quote parse) \\\"ZNQR:...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (IdC s))",
            "Result": "failed"
        },
        {
            "NumMutant": 12,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-17",
            "MutantSourceRow": 65,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((not (= len 2)) (error (quote parse-fundef) \\\"ZNQR: functions must have a name and a definition/body\\\")))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote parse-fundef) \\\"ZNQR: functions must have a name and a definition/body\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 13,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-17",
            "MutantSourceRow": 67,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((not (list? header)) (error (quote parse-fundef) \\\"ZNQR: bad syntax- function definitions must have a list its name and args\\\")))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote parse-fundef) \\\"ZNQR: bad syntax- function definitions must have a list its name and args\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 14,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-17",
            "MutantSourceRow": 69,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((not (symbol? (first (cast header (Listof Any))))) (error (quote parse-fundef) \\\"ZNQR: bad syntax- function name must be given as a symbol\\\")))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote parse-fundef) \\\"ZNQR: bad syntax- function name must be given as a symbol\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 15,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-17",
            "MutantSourceRow": 74,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((not (andmap symbol? args)) (error (quote parse-fundef) \\\"ZNQR: bad syntax- args must be given as symbols\\\")))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote parse-fundef) \\\"ZNQR: bad syntax- args must be given as symbols\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 16,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-17",
            "MutantSourceRow": 83,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((empty? funs) (error (quote parse-prog) \\\"ZNQR: invalid program\\\")) (else ((inst map FunDefC Sexp) parse-fundef (cast funs (Listof Sexp)))))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote parse-prog) \\\"ZNQR: invalid program\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 17,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-17",
            "MutantSourceRow": 83,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((empty? funs) (error (quote parse-prog) \\\"ZNQR: invalid program\\\")) (else ((inst map FunDefC Sexp) parse-fundef (cast funs (Listof Sexp)))))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin ((inst map FunDefC Sexp) parse-fundef (cast funs (Listof Sexp))))",
            "Result": "failed"
        },
        {
            "NumMutant": 18,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-17",
            "MutantSourceRow": 116,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((symbol=? op (quote /)) (interp-safe-divide leftVal rightVal)) (else (opValue leftVal rightVal)))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (interp-safe-divide leftVal rightVal))",
            "Result": "failed"
        },
        {
            "NumMutant": 19,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-17",
            "MutantSourceRow": 116,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((symbol=? op (quote /)) (interp-safe-divide leftVal rightVal)) (else (opValue leftVal rightVal)))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (opValue leftVal rightVal))",
            "Result": "failed"
        },
        {
            "NumMutant": 20,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-17",
            "MutantSourceRow": 121,
            "MutantSourceCol": 22,
            "MutantSource": "(cond ((not (= (length params) (length args))) (error (quote interp) \\\"ZNQR: Func app must use the same # of args as defined\\\")))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote interp) \\\"ZNQR: Func app must use the same # of args as defined\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 21,
            "MutatorType": "take-first-if",
            "MutantSourceFile": "program3/shuffled-17",
            "MutantSourceRow": 126,
            "MutantSourceCol": 20,
            "MutantSource": "(if (<= (interp i funs) 0) (interp t funs) (interp e funs))",
            "MutantDestinationFile": "program3/shuffled-17",
            "MutantDestinationRow": 126,
            "MutantDestinationCol": 47,
            "MutantDestination": "(interp t funs)",
            "Result": "failed"
        },
        {
            "NumMutant": 22,
            "MutatorType": "take-second-if",
            "MutantSourceFile": "program3/shuffled-17",
            "MutantSourceRow": 126,
            "MutantSourceCol": 20,
            "MutantSource": "(if (<= (interp i funs) 0) (interp t funs) (interp e funs))",
            "MutantDestinationFile": "program3/shuffled-17",
            "MutantDestinationRow": 126,
            "MutantDestinationCol": 63,
            "MutantDestination": "(interp e funs)",
            "Result": "failed"
        },
        {
            "NumMutant": 23,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-17",
            "MutantSourceRow": 131,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((= r 0) (error (quote interp-safe-divide) \\\"ZNQR: Can't divide by zero!\\\")) (else (/ l r)))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote interp-safe-divide) \\\"ZNQR: Can't divide by zero!\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 24,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-17",
            "MutantSourceRow": 131,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((= r 0) (error (quote interp-safe-divide) \\\"ZNQR: Can't divide by zero!\\\")) (else (/ l r)))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (/ l r))",
            "Result": "failed"
        },
        {
            "NumMutant": 25,
            "MutatorType": "aod-div",
            "MutantSourceFile": "program3/shuffled-17",
            "MutantSourceRow": 132,
            "MutantSourceCol": 14,
            "MutantSource": "(/ l r)",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 33,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin . l)",
            "Result": "failed"
        },
        {
            "NumMutant": 26,
            "MutatorType": "aod-div",
            "MutantSourceFile": "program3/shuffled-17",
            "MutantSourceRow": 132,
            "MutantSourceCol": 14,
            "MutantSource": "(/ l r)",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 33,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin . r)",
            "Result": "failed"
        },
        {
            "NumMutant": 27,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-17",
            "MutantSourceRow": 137,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((empty? args) (quote ())) (else (define arg (first args)) (cons (NumC (interp arg funs)) (interp-arg-values (rest args) funs))))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (quote ()))",
            "Result": "failed"
        },
        {
            "NumMutant": 28,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-17",
            "MutantSourceRow": 137,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((empty? args) (quote ())) (else (define arg (first args)) (cons (NumC (interp arg funs)) (interp-arg-values (rest args) funs))))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (define arg (first args)) (cons (NumC (interp arg funs)) (interp-arg-values (rest args) funs)))",
            "Result": "failed"
        },
        {
            "NumMutant": 29,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-17",
            "MutantSourceRow": 144,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((empty? fds) (error (quote get-fundef) \\\"ZNQR: reference to undefined function\\\")) ((cons? fds) (cond ((equal? n (FunDefC-name (first fds))) (first fds)) (else (get-fundef n (rest fds))))))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote get-fundef) \\\"ZNQR: reference to undefined function\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 30,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-17",
            "MutantSourceRow": 144,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((empty? fds) (error (quote get-fundef) \\\"ZNQR: reference to undefined function\\\")) ((cons? fds) (cond ((equal? n (FunDefC-name (first fds))) (first fds)) (else (get-fundef n (rest fds))))))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (cond ((equal? n (FunDefC-name (first fds))) (first fds)) (else (get-fundef n (rest fds)))))",
            "Result": "failed"
        },
        {
            "NumMutant": 31,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-17",
            "MutantSourceRow": 147,
            "MutantSourceCol": 9,
            "MutantSource": "(cond ((equal? n (FunDefC-name (first fds))) (first fds)) (else (get-fundef n (rest fds))))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (first fds))",
            "Result": "failed"
        },
        {
            "NumMutant": 32,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-17",
            "MutantSourceRow": 147,
            "MutantSourceCol": 9,
            "MutantSource": "(cond ((equal? n (FunDefC-name (first fds))) (first fds)) (else (get-fundef n (rest fds))))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (get-fundef n (rest fds)))",
            "Result": "failed"
        },
        {
            "NumMutant": 33,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-17",
            "MutantSourceRow": 158,
            "MutantSourceCol": 13,
            "MutantSource": "(cond ((symbol=? s for) what) (else in))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin what)",
            "Result": "failed"
        },
        {
            "NumMutant": 34,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-17",
            "MutantSourceRow": 158,
            "MutantSourceCol": 13,
            "MutantSource": "(cond ((symbol=? s for) what) (else in))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin in)",
            "Result": "failed"
        },
        {
            "NumMutant": 35,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-17",
            "MutantSourceRow": 169,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((empty? whats) in) (else (define newIn (subst (first whats) (first fors) in)) (interp-subst-AppC (rest whats) (rest fors) newIn)))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin in)",
            "Result": "failed"
        },
        {
            "NumMutant": 36,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-17",
            "MutantSourceRow": 169,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((empty? whats) in) (else (define newIn (subst (first whats) (first fors) in)) (interp-subst-AppC (rest whats) (rest fors) newIn)))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (define newIn (subst (first whats) (first fors) in)) (interp-subst-AppC (rest whats) (rest fors) newIn))",
            "Result": "failed"
        }
    ],
    "MutationScore": null,
    "TestFile": "program3/shuffled-17.rkt"
}
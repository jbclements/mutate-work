{
    "MutationResults": [
        {
            "NumMutant": 0,
            "MutatorType": "take-first-if",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 61,
            "MutantSourceCol": 13,
            "MutantSource": "(if (hash-has-key? env s) (hash-ref env s) (error (quote interp) \\\"ZNQR: id not found ~e\\\" s))",
            "MutantDestinationFile": "program3/shuffled-29",
            "MutantDestinationRow": 62,
            "MutantDestinationCol": 17,
            "MutantDestination": "(hash-ref env s)",
            "Result": "failed"
        },
        {
            "NumMutant": 1,
            "MutatorType": "take-second-if",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 61,
            "MutantSourceCol": 13,
            "MutantSource": "(if (hash-has-key? env s) (hash-ref env s) (error (quote interp) \\\"ZNQR: id not found ~e\\\" s))",
            "MutantDestinationFile": "program3/shuffled-29",
            "MutantDestinationRow": 63,
            "MutantDestinationCol": 17,
            "MutantDestination": "(error (quote interp) \\\"ZNQR: id not found ~e\\\" s)",
            "Result": "failed"
        },
        {
            "NumMutant": 2,
            "MutatorType": "take-first-if",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 67,
            "MutantSourceCol": 60,
            "MutantSource": "(if boo (interp (first (rest args)) env) (interp (first (rest (rest args))) env))",
            "MutantDestinationFile": "program3/shuffled-29",
            "MutantDestinationRow": 68,
            "MutantDestinationCol": 64,
            "MutantDestination": "(interp (first (rest args)) env)",
            "Result": "failed"
        },
        {
            "NumMutant": 3,
            "MutatorType": "take-second-if",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 67,
            "MutantSourceCol": 60,
            "MutantSource": "(if boo (interp (first (rest args)) env) (interp (first (rest (rest args))) env))",
            "MutantDestinationFile": "program3/shuffled-29",
            "MutantDestinationRow": 69,
            "MutantDestinationCol": 64,
            "MutantDestination": "(interp (first (rest (rest args))) env)",
            "Result": "failed"
        },
        {
            "NumMutant": 4,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 73,
            "MutantSourceCol": 23,
            "MutantSource": "(cond ((equal? (length args) (length param)) (define new-env (extend-env clo-env param (map (\u03bb ((arg : ExprC)) (interp arg env)) args))) (interp body new-env)) (else (error (quote interp) \\\"ZNQR: applying function to wrong num of args\\\")))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (define new-env (extend-env clo-env param (map (\u03bb ((arg : ExprC)) (interp arg env)) args))) (interp body new-env))",
            "Result": "failed"
        },
        {
            "NumMutant": 5,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 73,
            "MutantSourceCol": 23,
            "MutantSource": "(cond ((equal? (length args) (length param)) (define new-env (extend-env clo-env param (map (\u03bb ((arg : ExprC)) (interp arg env)) args))) (interp body new-env)) (else (error (quote interp) \\\"ZNQR: applying function to wrong num of args\\\")))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote interp) \\\"ZNQR: applying function to wrong num of args\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 6,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 99,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((and (NumV? a) (NumV? b)) (NumV (+ (NumV-n a) (NumV-n b)))) (else (error (quote prim-add) \\\"ZNQR: must add numbers only\\\")))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (NumV (+ (NumV-n a) (NumV-n b))))",
            "Result": "failed"
        },
        {
            "NumMutant": 7,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 99,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((and (NumV? a) (NumV? b)) (NumV (+ (NumV-n a) (NumV-n b)))) (else (error (quote prim-add) \\\"ZNQR: must add numbers only\\\")))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote prim-add) \\\"ZNQR: must add numbers only\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 8,
            "MutatorType": "aod-add",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 100,
            "MutantSourceCol": 37,
            "MutantSource": "(+ (NumV-n a) (NumV-n b))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 21,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin NumV-n a)",
            "Result": "failed"
        },
        {
            "NumMutant": 9,
            "MutatorType": "aod-add",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 100,
            "MutantSourceCol": 37,
            "MutantSource": "(+ (NumV-n a) (NumV-n b))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 21,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin NumV-n b)",
            "Result": "failed"
        },
        {
            "NumMutant": 10,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 107,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((and (NumV? a) (NumV? b)) (NumV (- (NumV-n a) (NumV-n b)))) (else (error (quote prim-sub) \\\"ZNQR: must subtract numbers only\\\")))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (NumV (- (NumV-n a) (NumV-n b))))",
            "Result": "failed"
        },
        {
            "NumMutant": 11,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 107,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((and (NumV? a) (NumV? b)) (NumV (- (NumV-n a) (NumV-n b)))) (else (error (quote prim-sub) \\\"ZNQR: must subtract numbers only\\\")))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote prim-sub) \\\"ZNQR: must subtract numbers only\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 12,
            "MutatorType": "aod-minus",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 108,
            "MutantSourceCol": 37,
            "MutantSource": "(- (NumV-n a) (NumV-n b))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 25,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin NumV-n a)",
            "Result": "failed"
        },
        {
            "NumMutant": 13,
            "MutatorType": "aod-minus",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 108,
            "MutantSourceCol": 37,
            "MutantSource": "(- (NumV-n a) (NumV-n b))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 25,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin NumV-n b)",
            "Result": "failed"
        },
        {
            "NumMutant": 14,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 115,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((and (NumV? a) (NumV? b)) (NumV (* (NumV-n a) (NumV-n b)))) (else (error (quote prim-mult) \\\"ZNQR: must multiply numbers only\\\")))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (NumV (* (NumV-n a) (NumV-n b))))",
            "Result": "failed"
        },
        {
            "NumMutant": 15,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 115,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((and (NumV? a) (NumV? b)) (NumV (* (NumV-n a) (NumV-n b)))) (else (error (quote prim-mult) \\\"ZNQR: must multiply numbers only\\\")))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote prim-mult) \\\"ZNQR: must multiply numbers only\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 16,
            "MutatorType": "aod-mul",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 116,
            "MutantSourceCol": 37,
            "MutantSource": "(* (NumV-n a) (NumV-n b))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 29,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin NumV-n a)",
            "Result": "failed"
        },
        {
            "NumMutant": 17,
            "MutatorType": "aod-mul",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 116,
            "MutantSourceCol": 37,
            "MutantSource": "(* (NumV-n a) (NumV-n b))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 29,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin NumV-n b)",
            "Result": "failed"
        },
        {
            "NumMutant": 18,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 123,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((and (and (NumV? a) (NumV? b)) (positive? (NumV-n b))) (NumV (/ (NumV-n a) (NumV-n b)))) ((and (and (NumV? a) (NumV? b)) (zero? (NumV-n b))) (error (quote prim-div) \\\"ZNQR: cannot divide by zero\\\")) (else (error (quote prim-div) \\\"ZNQR: must divide ...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (NumV (/ (NumV-n a) (NumV-n b))))",
            "Result": "failed"
        },
        {
            "NumMutant": 19,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 123,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((and (and (NumV? a) (NumV? b)) (positive? (NumV-n b))) (NumV (/ (NumV-n a) (NumV-n b)))) ((and (and (NumV? a) (NumV? b)) (zero? (NumV-n b))) (error (quote prim-div) \\\"ZNQR: cannot divide by zero\\\")) (else (error (quote prim-div) \\\"ZNQR: must divide ...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote prim-div) \\\"ZNQR: cannot divide by zero\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 20,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 123,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((and (and (NumV? a) (NumV? b)) (positive? (NumV-n b))) (NumV (/ (NumV-n a) (NumV-n b)))) ((and (and (NumV? a) (NumV? b)) (zero? (NumV-n b))) (error (quote prim-div) \\\"ZNQR: cannot divide by zero\\\")) (else (error (quote prim-div) \\\"ZNQR: must divide ...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote prim-div) \\\"ZNQR: must divide numbers only\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 21,
            "MutatorType": "aod-div",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 124,
            "MutantSourceCol": 66,
            "MutantSource": "(/ (NumV-n a) (NumV-n b))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 33,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin NumV-n a)",
            "Result": "failed"
        },
        {
            "NumMutant": 22,
            "MutatorType": "aod-div",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 124,
            "MutantSourceCol": 66,
            "MutantSource": "(/ (NumV-n a) (NumV-n b))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 33,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin NumV-n b)",
            "Result": "failed"
        },
        {
            "NumMutant": 23,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 132,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((and (and (NumV? a) (NumV? b)) (<= (NumV-n a) (NumV-n b))) (BoolV #t)) ((and (and (NumV? a) (NumV? b)) (> (NumV-n a) (NumV-n b))) (BoolV #f)) (else (error (quote prim-lte?) \\\"ZNQR: must input numbers only for <=\\\")))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (BoolV #t))",
            "Result": "failed"
        },
        {
            "NumMutant": 24,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 132,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((and (and (NumV? a) (NumV? b)) (<= (NumV-n a) (NumV-n b))) (BoolV #t)) ((and (and (NumV? a) (NumV? b)) (> (NumV-n a) (NumV-n b))) (BoolV #f)) (else (error (quote prim-lte?) \\\"ZNQR: must input numbers only for <=\\\")))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (BoolV #f))",
            "Result": "failed"
        },
        {
            "NumMutant": 25,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 132,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((and (and (NumV? a) (NumV? b)) (<= (NumV-n a) (NumV-n b))) (BoolV #t)) ((and (and (NumV? a) (NumV? b)) (> (NumV-n a) (NumV-n b))) (BoolV #f)) (else (error (quote prim-lte?) \\\"ZNQR: must input numbers only for <=\\\")))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote prim-lte?) \\\"ZNQR: must input numbers only for <=\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 26,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 141,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((and (and (NumV? a) (NumV? b)) (equal? (NumV-n a) (NumV-n b))) (BoolV #t)) ((and (and (StringV? a) (StringV? b)) (equal? (StringV-str a) (StringV-str b))) (BoolV #t)) ((and (and (BoolV? a) (BoolV? b)) (equal? (BoolV-boo a) (BoolV-boo b))) (BoolV ...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (BoolV #t))",
            "Result": "failed"
        },
        {
            "NumMutant": 27,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 141,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((and (and (NumV? a) (NumV? b)) (equal? (NumV-n a) (NumV-n b))) (BoolV #t)) ((and (and (StringV? a) (StringV? b)) (equal? (StringV-str a) (StringV-str b))) (BoolV #t)) ((and (and (BoolV? a) (BoolV? b)) (equal? (BoolV-boo a) (BoolV-boo b))) (BoolV ...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (BoolV #t))",
            "Result": "failed"
        },
        {
            "NumMutant": 28,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 141,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((and (and (NumV? a) (NumV? b)) (equal? (NumV-n a) (NumV-n b))) (BoolV #t)) ((and (and (StringV? a) (StringV? b)) (equal? (StringV-str a) (StringV-str b))) (BoolV #t)) ((and (and (BoolV? a) (BoolV? b)) (equal? (BoolV-boo a) (BoolV-boo b))) (BoolV ...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (BoolV #t))",
            "Result": "failed"
        },
        {
            "NumMutant": 29,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 141,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((and (and (NumV? a) (NumV? b)) (equal? (NumV-n a) (NumV-n b))) (BoolV #t)) ((and (and (StringV? a) (StringV? b)) (equal? (StringV-str a) (StringV-str b))) (BoolV #t)) ((and (and (BoolV? a) (BoolV? b)) (equal? (BoolV-boo a) (BoolV-boo b))) (BoolV ...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (BoolV #f))",
            "Result": "failed"
        },
        {
            "NumMutant": 30,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 150,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((and (empty? param) (empty? v)) env) (else (define setting (hash-set env (first param) (first v))) (extend-env setting (rest param) (rest v))))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin env)",
            "Result": "failed"
        },
        {
            "NumMutant": 31,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 150,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((and (empty? param) (empty? v)) env) (else (define setting (hash-set env (first param) (first v))) (extend-env setting (rest param) (rest v))))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (define setting (hash-set env (first param) (first v))) (extend-env setting (rest param) (rest v)))",
            "Result": "failed"
        },
        {
            "NumMutant": 32,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 165,
            "MutantSourceCol": 26,
            "MutantSource": "(cond ((equal? (length exprs) 3) (AppC (IdC (quote if)) (list (parse (first exprs)) (parse (first (rest exprs))) (parse (first (rest (rest exprs))))))) (else (error (quote parse) \\\"ZNQR: check arity of ifleq0\\\")))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (AppC (IdC (quote if)) (list (parse (first exprs)) (parse (first (rest exprs))) (parse (first (rest (rest exprs)))))))",
            "Result": "failed"
        },
        {
            "NumMutant": 33,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 165,
            "MutantSourceCol": 26,
            "MutantSource": "(cond ((equal? (length exprs) 3) (AppC (IdC (quote if)) (list (parse (first exprs)) (parse (first (rest exprs))) (parse (first (rest (rest exprs))))))) (else (error (quote parse) \\\"ZNQR: check arity of ifleq0\\\")))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote parse) \\\"ZNQR: check arity of ifleq0\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 34,
            "MutatorType": "take-first-if",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 171,
            "MutantSourceCol": 49,
            "MutantSource": "(if (args-same-name? (cast args (Listof Symbol))) (error (quote parse) \\\"ZNQR: duplicate function arguments\\\") (LamC (cast args (Listof Symbol)) (parse expr)))",
            "MutantDestinationFile": "program3/shuffled-29",
            "MutantDestinationRow": 172,
            "MutantDestinationCol": 53,
            "MutantDestination": "(error (quote parse) \\\"ZNQR: duplicate function arguments\\\")",
            "Result": "failed"
        },
        {
            "NumMutant": 35,
            "MutatorType": "take-second-if",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 171,
            "MutantSourceCol": 49,
            "MutantSource": "(if (args-same-name? (cast args (Listof Symbol))) (error (quote parse) \\\"ZNQR: duplicate function arguments\\\") (LamC (cast args (Listof Symbol)) (parse expr)))",
            "MutantDestinationFile": "program3/shuffled-29",
            "MutantDestinationRow": 173,
            "MutantDestinationCol": 53,
            "MutantDestination": "(LamC (cast args (Listof Symbol)) (parse expr))",
            "Result": "failed"
        },
        {
            "NumMutant": 36,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 174,
            "MutantSourceCol": 31,
            "MutantSource": "(cond ((args-same-name? (return-ids (cast args Sexp))) (error (quote parse) \\\"ZNQR: duplicate function arguments\\\")) (else (desugar s)))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote parse) \\\"ZNQR: duplicate function arguments\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 37,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 174,
            "MutantSourceCol": 31,
            "MutantSource": "(cond ((args-same-name? (return-ids (cast args Sexp))) (error (quote parse) \\\"ZNQR: duplicate function arguments\\\")) (else (desugar s)))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (desugar s))",
            "Result": "failed"
        },
        {
            "NumMutant": 38,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 179,
            "MutantSourceCol": 37,
            "MutantSource": "(cond ((equal? (length exprs) 2) (AppC (IdC fn) (list (parse (first exprs)) (parse (first (rest exprs)))))) (else (error (quote parse) \\\"ZNQR: check arity of binop\\\")))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (AppC (IdC fn) (list (parse (first exprs)) (parse (first (rest exprs))))))",
            "Result": "failed"
        },
        {
            "NumMutant": 39,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 179,
            "MutantSourceCol": 37,
            "MutantSource": "(cond ((equal? (length exprs) 2) (AppC (IdC fn) (list (parse (first exprs)) (parse (first (rest exprs)))))) (else (error (quote parse) \\\"ZNQR: check arity of binop\\\")))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote parse) \\\"ZNQR: check arity of binop\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 40,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 191,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((empty? l) #f) (else (or (ormap (\u03bb ((arg : Symbol)) (equal? (first l) arg)) (rest l)) (args-same-name? (rest l)))))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin #f)",
            "Result": "failed"
        },
        {
            "NumMutant": 41,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 191,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((empty? l) #f) (else (or (ormap (\u03bb ((arg : Symbol)) (equal? (first l) arg)) (rest l)) (args-same-name? (rest l)))))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (or (ormap (\u03bb ((arg : Symbol)) (equal? (first l) arg)) (rest l)) (args-same-name? (rest l))))",
            "Result": "failed"
        },
        {
            "NumMutant": 42,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 210,
            "MutantSourceCol": 51,
            "MutantSource": "(cond ((equal? (quote ->) id) (error (quote return-ids) \\\"ZNQR: invalid variable name\\\")) ((equal? (quote if) id) (error (quote return-ids) \\\"ZNQR: invalid variable name\\\")) ((equal? (quote =) id) (error (quote return-ids) \\\"ZNQR: invalid variable name\\\")) ((...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote return-ids) \\\"ZNQR: invalid variable name\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 43,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 210,
            "MutantSourceCol": 51,
            "MutantSource": "(cond ((equal? (quote ->) id) (error (quote return-ids) \\\"ZNQR: invalid variable name\\\")) ((equal? (quote if) id) (error (quote return-ids) \\\"ZNQR: invalid variable name\\\")) ((equal? (quote =) id) (error (quote return-ids) \\\"ZNQR: invalid variable name\\\")) ((...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote return-ids) \\\"ZNQR: invalid variable name\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 44,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 210,
            "MutantSourceCol": 51,
            "MutantSource": "(cond ((equal? (quote ->) id) (error (quote return-ids) \\\"ZNQR: invalid variable name\\\")) ((equal? (quote if) id) (error (quote return-ids) \\\"ZNQR: invalid variable name\\\")) ((equal? (quote =) id) (error (quote return-ids) \\\"ZNQR: invalid variable name\\\")) ((...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote return-ids) \\\"ZNQR: invalid variable name\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 45,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 210,
            "MutantSourceCol": 51,
            "MutantSource": "(cond ((equal? (quote ->) id) (error (quote return-ids) \\\"ZNQR: invalid variable name\\\")) ((equal? (quote if) id) (error (quote return-ids) \\\"ZNQR: invalid variable name\\\")) ((equal? (quote =) id) (error (quote return-ids) \\\"ZNQR: invalid variable name\\\")) ((...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote return-ids) \\\"ZNQR: invalid variable name\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 46,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "program3/shuffled-29",
            "MutantSourceRow": 210,
            "MutantSourceCol": 51,
            "MutantSource": "(cond ((equal? (quote ->) id) (error (quote return-ids) \\\"ZNQR: invalid variable name\\\")) ((equal? (quote if) id) (error (quote return-ids) \\\"ZNQR: invalid variable name\\\")) ((equal? (quote =) id) (error (quote return-ids) \\\"ZNQR: invalid variable name\\\")) ((...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (cons id (return-ids vars)))",
            "Result": "failed"
        }
    ],
    "MutationScore": null,
    "TestFile": "program3/shuffled-29.rkt"
}
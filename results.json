{
    "MutationResults": [
        {
            "NumMutant": 0,
            "MutatorType": "take-first-if",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 87,
            "MutantSourceCol": 20,
            "MutantSource": "(if b \\\"true\\\" \\\"false\\\")",
            "MutantDestinationFile": "./CodeCorpus/Assignment 6",
            "MutantDestinationRow": 87,
            "MutantDestinationCol": 26,
            "MutantDestination": "\\\"true\\\"",
            "Result": "failed"
        },
        {
            "NumMutant": 1,
            "MutatorType": "take-second-if",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 87,
            "MutantSourceCol": 20,
            "MutantSource": "(if b \\\"true\\\" \\\"false\\\")",
            "MutantDestinationFile": "./CodeCorpus/Assignment 6",
            "MutantDestinationRow": 87,
            "MutantDestinationCol": 33,
            "MutantDestination": "\\\"false\\\"",
            "Result": "failed"
        },
        {
            "NumMutant": 2,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 127,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((duplicate-args? varlist) (error (quote parse) \\\"ZODE Duplicate variable names\\\")) ((invalid-params? varlist) (error (quote parse) \\\"ZODE Can't use keywords as variable names\\\")) (else (lambC varlist (parse body))))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote parse) \\\"ZODE Duplicate variable names\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 3,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 127,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((duplicate-args? varlist) (error (quote parse) \\\"ZODE Duplicate variable names\\\")) ((invalid-params? varlist) (error (quote parse) \\\"ZODE Can't use keywords as variable names\\\")) (else (lambC varlist (parse body))))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote parse) \\\"ZODE Can't use keywords as variable names\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 4,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 127,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((duplicate-args? varlist) (error (quote parse) \\\"ZODE Duplicate variable names\\\")) ((invalid-params? varlist) (error (quote parse) \\\"ZODE Can't use keywords as variable names\\\")) (else (lambC varlist (parse body))))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (lambC varlist (parse body)))",
            "Result": "failed"
        },
        {
            "NumMutant": 5,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 138,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((invalid-params? (list arg)) (error (quote parse) \\\"ZODE Can't use keywords as variable names\\\")) (else (idC arg)))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote parse) \\\"ZODE Can't use keywords as variable names\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 6,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 138,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((invalid-params? (list arg)) (error (quote parse) \\\"ZODE Can't use keywords as variable names\\\")) (else (idC arg)))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (idC arg))",
            "Result": "failed"
        },
        {
            "NumMutant": 7,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 154,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((primop-numeric? fun-val) (define processed-args (map (lambda ((arg : ExprC)) : Value (interp arg env store)) args)) (define cleaned-args (clean-primparams processed-args)) (cond ((not (equal? (length cleaned-args) 2)) (error (quote interp) \\\"ZODE...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (define processed-args (map (lambda ((arg : ExprC)) : Value (interp arg env store)) args)) (define cleaned-args (clean-primparams processed-args)) (cond ((not (equal? (length cleaned-args) 2)) (error (quote interp) \\\"ZODE Invalid args for binop\\\"))...",
            "Result": "failed"
        },
        {
            "NumMutant": 8,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 154,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((primop-numeric? fun-val) (define processed-args (map (lambda ((arg : ExprC)) : Value (interp arg env store)) args)) (define cleaned-args (clean-primparams processed-args)) (cond ((not (equal? (length cleaned-args) 2)) (error (quote interp) \\\"ZODE...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (define processed-args (map (lambda ((arg : ExprC)) : Value (interp arg env store)) args)) (define first-processed (first processed-args)) (define second-processed (second processed-args)) (cond ((and (arrayV? first-processed) (arrayV? second-pro...",
            "Result": "failed"
        },
        {
            "NumMutant": 9,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 154,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((primop-numeric? fun-val) (define processed-args (map (lambda ((arg : ExprC)) : Value (interp arg env store)) args)) (define cleaned-args (clean-primparams processed-args)) (cond ((not (equal? (length cleaned-args) 2)) (error (quote interp) \\\"ZODE...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote interp) \\\"user-error ~s\\\" (map (lambda ((arg : ExprC)) : String (serialize (interp arg env store))) args)))",
            "Result": "failed"
        },
        {
            "NumMutant": 10,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 154,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((primop-numeric? fun-val) (define processed-args (map (lambda ((arg : ExprC)) : Value (interp arg env store)) args)) (define cleaned-args (clean-primparams processed-args)) (cond ((not (equal? (length cleaned-args) 2)) (error (quote interp) \\\"ZODE...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (define processed-args (map (lambda ((arg : ExprC)) : Value (interp arg env store)) args)) (get-last processed-args))",
            "Result": "failed"
        },
        {
            "NumMutant": 11,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 154,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((primop-numeric? fun-val) (define processed-args (map (lambda ((arg : ExprC)) : Value (interp arg env store)) args)) (define cleaned-args (clean-primparams processed-args)) (cond ((not (equal? (length cleaned-args) 2)) (error (quote interp) \\\"ZODE...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (define processed-args (map (lambda ((arg : ExprC)) : Value (interp arg env store)) args)) (new-array processed-args store))",
            "Result": "failed"
        },
        {
            "NumMutant": 12,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 154,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((primop-numeric? fun-val) (define processed-args (map (lambda ((arg : ExprC)) : Value (interp arg env store)) args)) (define cleaned-args (clean-primparams processed-args)) (cond ((not (equal? (length cleaned-args) 2)) (error (quote interp) \\\"ZODE...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (cond ((equal? 2 (length args)) (define arr-size (interp (first args) env store)) (define arr-content (interp (first (rest args)) env store)) (cond ((integer? arr-size) (new-array-constants (cast arr-size Integer) arr-content store)) (else (error...",
            "Result": "failed"
        },
        {
            "NumMutant": 13,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 154,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((primop-numeric? fun-val) (define processed-args (map (lambda ((arg : ExprC)) : Value (interp arg env store)) args)) (define cleaned-args (clean-primparams processed-args)) (cond ((not (equal? (length cleaned-args) 2)) (error (quote interp) \\\"ZODE...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (cond ((equal? 2 (length args)) (define arr (interp (first args) env store)) (define index (interp (first (rest args)) env store)) (cond ((and (arrayV? arr) (integer? index)) (aref-prim arr (cast index Integer) store)) (else (error (quote interp)...",
            "Result": "failed"
        },
        {
            "NumMutant": 14,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 154,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((primop-numeric? fun-val) (define processed-args (map (lambda ((arg : ExprC)) : Value (interp arg env store)) args)) (define cleaned-args (clean-primparams processed-args)) (cond ((not (equal? (length cleaned-args) 2)) (error (quote interp) \\\"ZODE...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (cond ((equal? 3 (length args)) (define arr (interp (first args) env store)) (define index (interp (first (rest args)) env store)) (define set-val (interp (first (rest (rest args))) env store)) (cond ((and (arrayV? arr) (integer? index)) (aset-pr...",
            "Result": "failed"
        },
        {
            "NumMutant": 15,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 154,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((primop-numeric? fun-val) (define processed-args (map (lambda ((arg : ExprC)) : Value (interp arg env store)) args)) (define cleaned-args (clean-primparams processed-args)) (cond ((not (equal? (length cleaned-args) 2)) (error (quote interp) \\\"ZODE...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (cond ((equal? 3 (length args)) (define str (interp (first args) env store)) (define from (interp (first (rest args)) env store)) (define to (interp (first (rest (rest args))) env store)) (cond ((and (string? str) (integer? from) (integer? to)) (...",
            "Result": "failed"
        },
        {
            "NumMutant": 16,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 154,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((primop-numeric? fun-val) (define processed-args (map (lambda ((arg : ExprC)) : Value (interp arg env store)) args)) (define cleaned-args (clean-primparams processed-args)) (cond ((not (equal? (length cleaned-args) 2)) (error (quote interp) \\\"ZODE...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (define bindings (bind-symbols (closV-arglst (cast fun-val closV)) (map (lambda ((arg : ExprC)) : Value (interp arg env store)) args) store)) (define extended-env (extend-env bindings (closV-env fun-val))) (interp (closV-body fun-val) extended-en...",
            "Result": "failed"
        },
        {
            "NumMutant": 17,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 154,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((primop-numeric? fun-val) (define processed-args (map (lambda ((arg : ExprC)) : Value (interp arg env store)) args)) (define cleaned-args (clean-primparams processed-args)) (cond ((not (equal? (length cleaned-args) 2)) (error (quote interp) \\\"ZODE...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote interp) \\\"ZODE function did not eval to closure ~s\\\" fun-val))",
            "Result": "failed"
        },
        {
            "NumMutant": 18,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 158,
            "MutantSourceCol": 8,
            "MutantSource": "(cond ((not (equal? (length cleaned-args) 2)) (error (quote interp) \\\"ZODE Invalid args for binop\\\")) (else (define left (first cleaned-args)) (define right (first (rest cleaned-args))) (match (primop-numeric-name fun-val) ((quote +) (+ left right)) ((quo...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote interp) \\\"ZODE Invalid args for binop\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 19,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 158,
            "MutantSourceCol": 8,
            "MutantSource": "(cond ((not (equal? (length cleaned-args) 2)) (error (quote interp) \\\"ZODE Invalid args for binop\\\")) (else (define left (first cleaned-args)) (define right (first (rest cleaned-args))) (match (primop-numeric-name fun-val) ((quote +) (+ left right)) ((quo...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (define left (first cleaned-args)) (define right (first (rest cleaned-args))) (match (primop-numeric-name fun-val) ((quote +) (+ left right)) ((quote -) (- left right)) ((quote *) (* left right)) ((quote /) (if (equal? right 0) (error (quote inte...",
            "Result": "failed"
        },
        {
            "NumMutant": 20,
            "MutatorType": "aod-add",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 164,
            "MutantSourceCol": 22,
            "MutantSource": "(+ left right)",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 21,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin . left)",
            "Result": "failed"
        },
        {
            "NumMutant": 21,
            "MutatorType": "aod-add",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 164,
            "MutantSourceCol": 22,
            "MutantSource": "(+ left right)",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 21,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin . right)",
            "Result": "failed"
        },
        {
            "NumMutant": 22,
            "MutatorType": "aod-minus",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 165,
            "MutantSourceCol": 22,
            "MutantSource": "(- left right)",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 25,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin . left)",
            "Result": "failed"
        },
        {
            "NumMutant": 23,
            "MutatorType": "aod-minus",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 165,
            "MutantSourceCol": 22,
            "MutantSource": "(- left right)",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 25,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin . right)",
            "Result": "failed"
        },
        {
            "NumMutant": 24,
            "MutatorType": "aod-mul",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 166,
            "MutantSourceCol": 22,
            "MutantSource": "(* left right)",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 29,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin . left)",
            "Result": "failed"
        },
        {
            "NumMutant": 25,
            "MutatorType": "aod-mul",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 166,
            "MutantSourceCol": 22,
            "MutantSource": "(* left right)",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 29,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin . right)",
            "Result": "failed"
        },
        {
            "NumMutant": 26,
            "MutatorType": "take-first-if",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 168,
            "MutantSourceCol": 19,
            "MutantSource": "(if (equal? right 0) (error (quote interp) \\\"ZODE Divide by 0 error\\\") (/ left right))",
            "MutantDestinationFile": "./CodeCorpus/Assignment 6",
            "MutantDestinationRow": 169,
            "MutantDestinationCol": 23,
            "MutantDestination": "(error (quote interp) \\\"ZODE Divide by 0 error\\\")",
            "Result": "failed"
        },
        {
            "NumMutant": 27,
            "MutatorType": "take-second-if",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 168,
            "MutantSourceCol": 19,
            "MutantSource": "(if (equal? right 0) (error (quote interp) \\\"ZODE Divide by 0 error\\\") (/ left right))",
            "MutantDestinationFile": "./CodeCorpus/Assignment 6",
            "MutantDestinationRow": 170,
            "MutantDestinationCol": 23,
            "MutantDestination": "(/ left right)",
            "Result": "failed"
        },
        {
            "NumMutant": 28,
            "MutatorType": "aod-div",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 170,
            "MutantSourceCol": 23,
            "MutantSource": "(/ left right)",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 33,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin . left)",
            "Result": "failed"
        },
        {
            "NumMutant": 29,
            "MutatorType": "aod-div",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 170,
            "MutantSourceCol": 23,
            "MutantSource": "(/ left right)",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 33,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin . right)",
            "Result": "failed"
        },
        {
            "NumMutant": 30,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 177,
            "MutantSourceCol": 8,
            "MutantSource": "(cond ((and (arrayV? first-processed) (arrayV? second-processed)) (equal? (arrayV-start first-processed) (arrayV-start second-processed))) (else (equal? first-processed second-processed)))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (equal? (arrayV-start first-processed) (arrayV-start second-processed)))",
            "Result": "failed"
        },
        {
            "NumMutant": 31,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 177,
            "MutantSourceCol": 8,
            "MutantSource": "(cond ((and (arrayV? first-processed) (arrayV? second-processed)) (equal? (arrayV-start first-processed) (arrayV-start second-processed))) (else (equal? first-processed second-processed)))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (equal? first-processed second-processed))",
            "Result": "passed"
        },
        {
            "NumMutant": 32,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 191,
            "MutantSourceCol": 8,
            "MutantSource": "(cond ((equal? 2 (length args)) (define arr-size (interp (first args) env store)) (define arr-content (interp (first (rest args)) env store)) (cond ((integer? arr-size) (new-array-constants (cast arr-size Integer) arr-content store)) (else (error (quote...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (define arr-size (interp (first args) env store)) (define arr-content (interp (first (rest args)) env store)) (cond ((integer? arr-size) (new-array-constants (cast arr-size Integer) arr-content store)) (else (error (quote interp) \\\"ZODE make-array...",
            "Result": "failed"
        },
        {
            "NumMutant": 33,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 191,
            "MutantSourceCol": 8,
            "MutantSource": "(cond ((equal? 2 (length args)) (define arr-size (interp (first args) env store)) (define arr-content (interp (first (rest args)) env store)) (cond ((integer? arr-size) (new-array-constants (cast arr-size Integer) arr-content store)) (else (error (quote...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote interp) \\\"ZODE make-array invalid number of params\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 34,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 195,
            "MutantSourceCol": 11,
            "MutantSource": "(cond ((integer? arr-size) (new-array-constants (cast arr-size Integer) arr-content store)) (else (error (quote interp) \\\"ZODE make-array, arr-size must be an integer, but got: ~a\\\" arr-size)))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (new-array-constants (cast arr-size Integer) arr-content store))",
            "Result": "failed"
        },
        {
            "NumMutant": 35,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 195,
            "MutantSourceCol": 11,
            "MutantSource": "(cond ((integer? arr-size) (new-array-constants (cast arr-size Integer) arr-content store)) (else (error (quote interp) \\\"ZODE make-array, arr-size must be an integer, but got: ~a\\\" arr-size)))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote interp) \\\"ZODE make-array, arr-size must be an integer, but got: ~a\\\" arr-size))",
            "Result": "failed"
        },
        {
            "NumMutant": 36,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 202,
            "MutantSourceCol": 8,
            "MutantSource": "(cond ((equal? 2 (length args)) (define arr (interp (first args) env store)) (define index (interp (first (rest args)) env store)) (cond ((and (arrayV? arr) (integer? index)) (aref-prim arr (cast index Integer) store)) (else (error (quote interp) \\\"ZODE ...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (define arr (interp (first args) env store)) (define index (interp (first (rest args)) env store)) (cond ((and (arrayV? arr) (integer? index)) (aref-prim arr (cast index Integer) store)) (else (error (quote interp) \\\"ZODE aref, Expected arrayV and...",
            "Result": "failed"
        },
        {
            "NumMutant": 37,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 202,
            "MutantSourceCol": 8,
            "MutantSource": "(cond ((equal? 2 (length args)) (define arr (interp (first args) env store)) (define index (interp (first (rest args)) env store)) (cond ((and (arrayV? arr) (integer? index)) (aref-prim arr (cast index Integer) store)) (else (error (quote interp) \\\"ZODE ...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote interp) \\\"ZODE aref invalid number of params\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 38,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 206,
            "MutantSourceCol": 11,
            "MutantSource": "(cond ((and (arrayV? arr) (integer? index)) (aref-prim arr (cast index Integer) store)) (else (error (quote interp) \\\"ZODE aref, Expected arrayV and integer, but got: ~a and ~a\\\" arr index)))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (aref-prim arr (cast index Integer) store))",
            "Result": "failed"
        },
        {
            "NumMutant": 39,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 206,
            "MutantSourceCol": 11,
            "MutantSource": "(cond ((and (arrayV? arr) (integer? index)) (aref-prim arr (cast index Integer) store)) (else (error (quote interp) \\\"ZODE aref, Expected arrayV and integer, but got: ~a and ~a\\\" arr index)))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote interp) \\\"ZODE aref, Expected arrayV and integer, but got: ~a and ~a\\\" arr index))",
            "Result": "failed"
        },
        {
            "NumMutant": 40,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 213,
            "MutantSourceCol": 8,
            "MutantSource": "(cond ((equal? 3 (length args)) (define arr (interp (first args) env store)) (define index (interp (first (rest args)) env store)) (define set-val (interp (first (rest (rest args))) env store)) (cond ((and (arrayV? arr) (integer? index)) (aset-prim arr ...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (define arr (interp (first args) env store)) (define index (interp (first (rest args)) env store)) (define set-val (interp (first (rest (rest args))) env store)) (cond ((and (arrayV? arr) (integer? index)) (aset-prim arr (cast index Integer) set-...",
            "Result": "failed"
        },
        {
            "NumMutant": 41,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 213,
            "MutantSourceCol": 8,
            "MutantSource": "(cond ((equal? 3 (length args)) (define arr (interp (first args) env store)) (define index (interp (first (rest args)) env store)) (define set-val (interp (first (rest (rest args))) env store)) (cond ((and (arrayV? arr) (integer? index)) (aset-prim arr ...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote interp) \\\"ZODE aset invalid number of params\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 42,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 218,
            "MutantSourceCol": 11,
            "MutantSource": "(cond ((and (arrayV? arr) (integer? index)) (aset-prim arr (cast index Integer) set-val store)) (else (error (quote interp) \\\"ZODE aset Expected arrayV and integer, but got: ~a and ~a\\\" arr index)))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (aset-prim arr (cast index Integer) set-val store))",
            "Result": "failed"
        },
        {
            "NumMutant": 43,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 218,
            "MutantSourceCol": 11,
            "MutantSource": "(cond ((and (arrayV? arr) (integer? index)) (aset-prim arr (cast index Integer) set-val store)) (else (error (quote interp) \\\"ZODE aset Expected arrayV and integer, but got: ~a and ~a\\\" arr index)))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote interp) \\\"ZODE aset Expected arrayV and integer, but got: ~a and ~a\\\" arr index))",
            "Result": "failed"
        },
        {
            "NumMutant": 44,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 226,
            "MutantSourceCol": 8,
            "MutantSource": "(cond ((equal? 3 (length args)) (define str (interp (first args) env store)) (define from (interp (first (rest args)) env store)) (define to (interp (first (rest (rest args))) env store)) (cond ((and (string? str) (integer? from) (integer? to)) (substri...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (define str (interp (first args) env store)) (define from (interp (first (rest args)) env store)) (define to (interp (first (rest (rest args))) env store)) (cond ((and (string? str) (integer? from) (integer? to)) (substring str (cast from Integer...",
            "Result": "failed"
        },
        {
            "NumMutant": 45,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 226,
            "MutantSourceCol": 8,
            "MutantSource": "(cond ((equal? 3 (length args)) (define str (interp (first args) env store)) (define from (interp (first (rest args)) env store)) (define to (interp (first (rest (rest args))) env store)) (cond ((and (string? str) (integer? from) (integer? to)) (substri...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote interp) \\\"ZODE substring invalid number of params\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 46,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 231,
            "MutantSourceCol": 11,
            "MutantSource": "(cond ((and (string? str) (integer? from) (integer? to)) (substring str (cast from Integer) (cast to Integer))) (else (error (quote interp) \\\"ZODE substring, Expected string integer integer, but got: ~a, ~a, ~a\\\" str from to)))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (substring str (cast from Integer) (cast to Integer)))",
            "Result": "failed"
        },
        {
            "NumMutant": 47,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 231,
            "MutantSourceCol": 11,
            "MutantSource": "(cond ((and (string? str) (integer? from) (integer? to)) (substring str (cast from Integer) (cast to Integer))) (else (error (quote interp) \\\"ZODE substring, Expected string integer integer, but got: ~a, ~a, ~a\\\" str from to)))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote interp) \\\"ZODE substring, Expected string integer integer, but got: ~a, ~a, ~a\\\" str from to))",
            "Result": "failed"
        },
        {
            "NumMutant": 48,
            "MutatorType": "take-first-if",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 252,
            "MutantSourceCol": 5,
            "MutantSource": "(if (not (boolean? result)) (error (quote interp) \\\"ZODE if test non-boolean\\\") (if result (interp then env store) (interp else env store)))",
            "MutantDestinationFile": "./CodeCorpus/Assignment 6",
            "MutantDestinationRow": 253,
            "MutantDestinationCol": 9,
            "MutantDestination": "(error (quote interp) \\\"ZODE if test non-boolean\\\")",
            "Result": "failed"
        },
        {
            "NumMutant": 49,
            "MutatorType": "take-second-if",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 252,
            "MutantSourceCol": 5,
            "MutantSource": "(if (not (boolean? result)) (error (quote interp) \\\"ZODE if test non-boolean\\\") (if result (interp then env store) (interp else env store)))",
            "MutantDestinationFile": "./CodeCorpus/Assignment 6",
            "MutantDestinationRow": 254,
            "MutantDestinationCol": 9,
            "MutantDestination": "(if result (interp then env store) (interp else env store))",
            "Result": "failed"
        },
        {
            "NumMutant": 50,
            "MutatorType": "take-first-if",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 254,
            "MutantSourceCol": 9,
            "MutantSource": "(if result (interp then env store) (interp else env store))",
            "MutantDestinationFile": "./CodeCorpus/Assignment 6",
            "MutantDestinationRow": 254,
            "MutantDestinationCol": 20,
            "MutantDestination": "(interp then env store)",
            "Result": "failed"
        },
        {
            "NumMutant": 51,
            "MutatorType": "take-second-if",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 254,
            "MutantSourceCol": 9,
            "MutantSource": "(if result (interp then env store) (interp else env store))",
            "MutantDestinationFile": "./CodeCorpus/Assignment 6",
            "MutantDestinationRow": 254,
            "MutantDestinationCol": 44,
            "MutantDestination": "(interp else env store)",
            "Result": "failed"
        },
        {
            "NumMutant": 52,
            "MutatorType": "aod-add",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 271,
            "MutantSourceCol": 24,
            "MutantSource": "(+ first-open-loc 1)",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 21,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin . first-open-loc)",
            "Result": "failed"
        },
        {
            "NumMutant": 53,
            "MutatorType": "aod-add",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 271,
            "MutantSourceCol": 24,
            "MutantSource": "(+ first-open-loc 1)",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 21,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin . 1)",
            "Result": "failed"
        },
        {
            "NumMutant": 54,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 272,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((>= first-open-loc (vector-length store)) (error (quote new-array) \\\"ZODE Attempting to create array outside of alloacted memory\\\")) (else (vector-set! store first-open-loc array) (allocate contents store (+ first-open-loc 1)) (vector-set! store (a...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote new-array) \\\"ZODE Attempting to create array outside of alloacted memory\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 55,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 272,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((>= first-open-loc (vector-length store)) (error (quote new-array) \\\"ZODE Attempting to create array outside of alloacted memory\\\")) (else (vector-set! store first-open-loc array) (allocate contents store (+ first-open-loc 1)) (vector-set! store (a...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (vector-set! store first-open-loc array) (allocate contents store (+ first-open-loc 1)) (vector-set! store (ann 0 Integer) (+ first-open-loc (length contents) 1)) array)",
            "Result": "failed"
        },
        {
            "NumMutant": 56,
            "MutatorType": "aod-add",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 277,
            "MutantSourceCol": 30,
            "MutantSource": "(+ first-open-loc 1)",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 21,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin . first-open-loc)",
            "Result": "failed"
        },
        {
            "NumMutant": 57,
            "MutatorType": "aod-add",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 277,
            "MutantSourceCol": 30,
            "MutantSource": "(+ first-open-loc 1)",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 21,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin . 1)",
            "Result": "failed"
        },
        {
            "NumMutant": 58,
            "MutatorType": "aod-add",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 278,
            "MutantSourceCol": 40,
            "MutantSource": "(+ first-open-loc (length contents) 1)",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 21,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin . first-open-loc)",
            "Result": "failed"
        },
        {
            "NumMutant": 59,
            "MutatorType": "aod-add",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 278,
            "MutantSourceCol": 40,
            "MutantSource": "(+ first-open-loc (length contents) 1)",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 21,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin length contents)",
            "Result": "failed"
        },
        {
            "NumMutant": 60,
            "MutatorType": "aod-add",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 278,
            "MutantSourceCol": 40,
            "MutantSource": "(+ first-open-loc (length contents) 1)",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 21,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin . 1)",
            "Result": "failed"
        },
        {
            "NumMutant": 61,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 287,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((>= index (arrayV-size array)) (error (quote aref-prim) \\\"ZODE aref Index out of bounds\\\")) ((< index 0) (error (quote aref-prim) \\\"ZODE aref Index out of bounds\\\")) (else (vector-ref store (+ (arrayV-start array) index))))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote aref-prim) \\\"ZODE aref Index out of bounds\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 62,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 287,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((>= index (arrayV-size array)) (error (quote aref-prim) \\\"ZODE aref Index out of bounds\\\")) ((< index 0) (error (quote aref-prim) \\\"ZODE aref Index out of bounds\\\")) (else (vector-ref store (+ (arrayV-start array) index))))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote aref-prim) \\\"ZODE aref Index out of bounds\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 63,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 287,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((>= index (arrayV-size array)) (error (quote aref-prim) \\\"ZODE aref Index out of bounds\\\")) ((< index 0) (error (quote aref-prim) \\\"ZODE aref Index out of bounds\\\")) (else (vector-ref store (+ (arrayV-start array) index))))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (vector-ref store (+ (arrayV-start array) index)))",
            "Result": "failed"
        },
        {
            "NumMutant": 64,
            "MutatorType": "aod-add",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 290,
            "MutantSourceCol": 28,
            "MutantSource": "(+ (arrayV-start array) index)",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 21,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin arrayV-start array)",
            "Result": "failed"
        },
        {
            "NumMutant": 65,
            "MutatorType": "aod-add",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 290,
            "MutantSourceCol": 28,
            "MutantSource": "(+ (arrayV-start array) index)",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 21,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin . index)",
            "Result": "failed"
        },
        {
            "NumMutant": 66,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 294,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((>= index (arrayV-size array)) (error (quote aset-prim) \\\"ZODE aset Index out of bounds\\\")) ((< index 0) (error (quote aset-prim) \\\"ZODE aset Index out of bounds\\\")) (else (vector-set! store (+ (arrayV-start array) index) val) (nullV \\\"null\\\")))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote aset-prim) \\\"ZODE aset Index out of bounds\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 67,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 294,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((>= index (arrayV-size array)) (error (quote aset-prim) \\\"ZODE aset Index out of bounds\\\")) ((< index 0) (error (quote aset-prim) \\\"ZODE aset Index out of bounds\\\")) (else (vector-set! store (+ (arrayV-start array) index) val) (nullV \\\"null\\\")))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote aset-prim) \\\"ZODE aset Index out of bounds\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 68,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 294,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((>= index (arrayV-size array)) (error (quote aset-prim) \\\"ZODE aset Index out of bounds\\\")) ((< index 0) (error (quote aset-prim) \\\"ZODE aset Index out of bounds\\\")) (else (vector-set! store (+ (arrayV-start array) index) val) (nullV \\\"null\\\")))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (vector-set! store (+ (arrayV-start array) index) val) (nullV \\\"null\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 69,
            "MutatorType": "aod-add",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 298,
            "MutantSourceCol": 24,
            "MutantSource": "(+ (arrayV-start array) index)",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 21,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin arrayV-start array)",
            "Result": "failed"
        },
        {
            "NumMutant": 70,
            "MutatorType": "aod-add",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 298,
            "MutantSourceCol": 24,
            "MutantSource": "(+ (arrayV-start array) index)",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 21,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin . index)",
            "Result": "failed"
        },
        {
            "NumMutant": 71,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 309,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((equal? target-symbol symbol) (vector-set! store (Binding-loc first) desired-change) (nullV \\\"null\\\")) (else (mutate-binding symbol rest store desired-change)))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (vector-set! store (Binding-loc first) desired-change) (nullV \\\"null\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 72,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 309,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((equal? target-symbol symbol) (vector-set! store (Binding-loc first) desired-change) (nullV \\\"null\\\")) (else (mutate-binding symbol rest store desired-change)))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (mutate-binding symbol rest store desired-change))",
            "Result": "failed"
        },
        {
            "NumMutant": 73,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 321,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((>= (ann insert-loc Integer) (vector-length store)) (error (quote new-array) \\\"ZODE Attempting to create array outside of alloacted memory\\\")) (else (vector-set! store (ann insert-loc Integer) first) (allocate rest store (+ insert-loc 1))))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote new-array) \\\"ZODE Attempting to create array outside of alloacted memory\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 74,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 321,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((>= (ann insert-loc Integer) (vector-length store)) (error (quote new-array) \\\"ZODE Attempting to create array outside of alloacted memory\\\")) (else (vector-set! store (ann insert-loc Integer) first) (allocate rest store (+ insert-loc 1))))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (vector-set! store (ann insert-loc Integer) first) (allocate rest store (+ insert-loc 1)))",
            "Result": "failed"
        },
        {
            "NumMutant": 75,
            "MutatorType": "aod-add",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 326,
            "MutantSourceCol": 29,
            "MutantSource": "(+ insert-loc 1)",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 21,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin . insert-loc)",
            "Result": "failed"
        },
        {
            "NumMutant": 76,
            "MutatorType": "aod-add",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 326,
            "MutantSourceCol": 29,
            "MutantSource": "(+ insert-loc 1)",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 21,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin . 1)",
            "Result": "failed"
        },
        {
            "NumMutant": 77,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 330,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((empty? env) (error (quote lookup) \\\"ZODE Unbound identifier ~s\\\" for)) (else (let ((binding (first env))) (if (symbol=? for (Binding-name binding)) (vector-ref store (Binding-loc binding)) (lookup for (rest env) store)))))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote lookup) \\\"ZODE Unbound identifier ~s\\\" for))",
            "Result": "failed"
        },
        {
            "NumMutant": 78,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 330,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((empty? env) (error (quote lookup) \\\"ZODE Unbound identifier ~s\\\" for)) (else (let ((binding (first env))) (if (symbol=? for (Binding-name binding)) (vector-ref store (Binding-loc binding)) (lookup for (rest env) store)))))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (let ((binding (first env))) (if (symbol=? for (Binding-name binding)) (vector-ref store (Binding-loc binding)) (lookup for (rest env) store))))",
            "Result": "failed"
        },
        {
            "NumMutant": 79,
            "MutatorType": "take-first-if",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 333,
            "MutantSourceCol": 12,
            "MutantSource": "(if (symbol=? for (Binding-name binding)) (vector-ref store (Binding-loc binding)) (lookup for (rest env) store))",
            "MutantDestinationFile": "./CodeCorpus/Assignment 6",
            "MutantDestinationRow": 334,
            "MutantDestinationCol": 16,
            "MutantDestination": "(vector-ref store (Binding-loc binding))",
            "Result": "failed"
        },
        {
            "NumMutant": 80,
            "MutatorType": "take-second-if",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 333,
            "MutantSourceCol": 12,
            "MutantSource": "(if (symbol=? for (Binding-name binding)) (vector-ref store (Binding-loc binding)) (lookup for (rest env) store))",
            "MutantDestinationFile": "./CodeCorpus/Assignment 6",
            "MutantDestinationRow": 335,
            "MutantDestinationCol": 16,
            "MutantDestination": "(lookup for (rest env) store)",
            "Result": "failed"
        },
        {
            "NumMutant": 81,
            "MutatorType": "aod-add",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 350,
            "MutantSourceCol": 40,
            "MutantSource": "(+ first-open-loc 1)",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 21,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin . first-open-loc)",
            "Result": "failed"
        },
        {
            "NumMutant": 82,
            "MutatorType": "aod-add",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 350,
            "MutantSourceCol": 40,
            "MutantSource": "(+ first-open-loc 1)",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 21,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin . 1)",
            "Result": "failed"
        },
        {
            "NumMutant": 83,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 355,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((empty? (rest lst)) (first lst)) (else (get-last (rest lst))))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (first lst))",
            "Result": "failed"
        },
        {
            "NumMutant": 84,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 355,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((empty? (rest lst)) (first lst)) (else (get-last (rest lst))))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (get-last (rest lst)))",
            "Result": "failed"
        },
        {
            "NumMutant": 85,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 363,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((empty? bindings) env) ((empty? env) (cons (first bindings) (extend-env (rest bindings) env))) (else (define first-env (first env)) (define first-bind (first bindings)) (cond ((symbol=? (Binding-name first-env) (Binding-name first-bind)) (cons fi...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin env)",
            "Result": "failed"
        },
        {
            "NumMutant": 86,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 363,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((empty? bindings) env) ((empty? env) (cons (first bindings) (extend-env (rest bindings) env))) (else (define first-env (first env)) (define first-bind (first bindings)) (cond ((symbol=? (Binding-name first-env) (Binding-name first-bind)) (cons fi...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (cons (first bindings) (extend-env (rest bindings) env)))",
            "Result": "failed"
        },
        {
            "NumMutant": 87,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 363,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((empty? bindings) env) ((empty? env) (cons (first bindings) (extend-env (rest bindings) env))) (else (define first-env (first env)) (define first-bind (first bindings)) (cond ((symbol=? (Binding-name first-env) (Binding-name first-bind)) (cons fi...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (define first-env (first env)) (define first-bind (first bindings)) (cond ((symbol=? (Binding-name first-env) (Binding-name first-bind)) (cons first-bind (extend-env (rest bindings) env))) (else (cons first-env (extend-env bindings (rest env))))))",
            "Result": "failed"
        },
        {
            "NumMutant": 88,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 371,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((symbol=? (Binding-name first-env) (Binding-name first-bind)) (cons first-bind (extend-env (rest bindings) env))) (else (cons first-env (extend-env bindings (rest env)))))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (cons first-bind (extend-env (rest bindings) env)))",
            "Result": "passed"
        },
        {
            "NumMutant": 89,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 371,
            "MutantSourceCol": 5,
            "MutantSource": "(cond ((symbol=? (Binding-name first-env) (Binding-name first-bind)) (cons first-bind (extend-env (rest bindings) env))) (else (cons first-env (extend-env bindings (rest env)))))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (cons first-env (extend-env bindings (rest env))))",
            "Result": "failed"
        },
        {
            "NumMutant": 90,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 379,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((empty? params) (quote ())) ((not (real? (first params))) (error (quote clean-primparams) \\\"ZODE Invalid param for numeric primitive ~s\\\" (first params))) (else (cons (cast (first params) Real) (clean-primparams (rest params)))))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (quote ()))",
            "Result": "failed"
        },
        {
            "NumMutant": 91,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 379,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((empty? params) (quote ())) ((not (real? (first params))) (error (quote clean-primparams) \\\"ZODE Invalid param for numeric primitive ~s\\\" (first params))) (else (cons (cast (first params) Real) (clean-primparams (rest params)))))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote clean-primparams) \\\"ZODE Invalid param for numeric primitive ~s\\\" (first params)))",
            "Result": "failed"
        },
        {
            "NumMutant": 92,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 379,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((empty? params) (quote ())) ((not (real? (first params))) (error (quote clean-primparams) \\\"ZODE Invalid param for numeric primitive ~s\\\" (first params))) (else (cons (cast (first params) Real) (clean-primparams (rest params)))))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (cons (cast (first params) Real) (clean-primparams (rest params))))",
            "Result": "failed"
        },
        {
            "NumMutant": 93,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 389,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((empty? args) #f) ((not (not (member (first args) (rest args)))) #t) (else (duplicate-args? (rest args))))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin #f)",
            "Result": "failed"
        },
        {
            "NumMutant": 94,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 389,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((empty? args) #f) ((not (not (member (first args) (rest args)))) #t) (else (duplicate-args? (rest args))))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin #t)",
            "Result": "failed"
        },
        {
            "NumMutant": 95,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 389,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((empty? args) #f) ((not (not (member (first args) (rest args)))) #t) (else (duplicate-args? (rest args))))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (duplicate-args? (rest args)))",
            "Result": "failed"
        },
        {
            "NumMutant": 96,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 396,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((empty? args) #f) ((or (symbol=? (first args) (quote locals)) (symbol=? (first args) (quote if)) (symbol=? (first args) (quote lamb)) (symbol=? (first args) (quote :)) (symbol=? (first args) (quote =)) (symbol=? (first args) (quote :=))) #t) (els...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin #f)",
            "Result": "failed"
        },
        {
            "NumMutant": 97,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 396,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((empty? args) #f) ((or (symbol=? (first args) (quote locals)) (symbol=? (first args) (quote if)) (symbol=? (first args) (quote lamb)) (symbol=? (first args) (quote :)) (symbol=? (first args) (quote =)) (symbol=? (first args) (quote :=))) #t) (els...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin #t)",
            "Result": "failed"
        },
        {
            "NumMutant": 98,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 396,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((empty? args) #f) ((or (symbol=? (first args) (quote locals)) (symbol=? (first args) (quote if)) (symbol=? (first args) (quote lamb)) (symbol=? (first args) (quote :)) (symbol=? (first args) (quote =)) (symbol=? (first args) (quote :=))) #t) (els...",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (invalid-params? (rest args)))",
            "Result": "failed"
        },
        {
            "NumMutant": 99,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 409,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((empty? args) (quote ())) ((not (symbol? (first args))) (error (quote get-symbols) \\\"ZODE Vars not entierly symbols\\\")) (else (cons (first args) (get-symbols (rest args)))))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (quote ()))",
            "Result": "failed"
        },
        {
            "NumMutant": 100,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 409,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((empty? args) (quote ())) ((not (symbol? (first args))) (error (quote get-symbols) \\\"ZODE Vars not entierly symbols\\\")) (else (cons (first args) (get-symbols (rest args)))))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (error (quote get-symbols) \\\"ZODE Vars not entierly symbols\\\"))",
            "Result": "failed"
        },
        {
            "NumMutant": 101,
            "MutatorType": "permute-cond",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 409,
            "MutantSourceCol": 2,
            "MutantSource": "(cond ((empty? args) (quote ())) ((not (symbol? (first args))) (error (quote get-symbols) \\\"ZODE Vars not entierly symbols\\\")) (else (cons (first args) (get-symbols (rest args)))))",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 58,
            "MutantDestinationCol": 12,
            "MutantDestination": "(begin (cons (first args) (get-symbols (rest args))))",
            "Result": "failed"
        },
        {
            "NumMutant": 102,
            "MutatorType": "aod-minus",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 707,
            "MutantSourceCol": 71,
            "MutantSource": "(- size 2)",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 25,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin . size)",
            "Result": "passed"
        },
        {
            "NumMutant": 103,
            "MutatorType": "aod-minus",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 707,
            "MutantSourceCol": 71,
            "MutantSource": "(- size 2)",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 25,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin . 2)",
            "Result": "passed"
        },
        {
            "NumMutant": 104,
            "MutatorType": "aod-add",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 708,
            "MutantSourceCol": 71,
            "MutantSource": "(+ (aref arr index) 1)",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 21,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin aref arr index)",
            "Result": "passed"
        },
        {
            "NumMutant": 105,
            "MutatorType": "aod-add",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 708,
            "MutantSourceCol": 71,
            "MutantSource": "(+ (aref arr index) 1)",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 21,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin . 1)",
            "Result": "passed"
        },
        {
            "NumMutant": 106,
            "MutatorType": "aod-add",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 708,
            "MutantSourceCol": 104,
            "MutantSource": "(+ index 1)",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 21,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin . index)",
            "Result": "passed"
        },
        {
            "NumMutant": 107,
            "MutatorType": "aod-add",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 708,
            "MutantSourceCol": 104,
            "MutantSource": "(+ index 1)",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 21,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin . 1)",
            "Result": "passed"
        },
        {
            "NumMutant": 108,
            "MutatorType": "aod-add",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 709,
            "MutantSourceCol": 77,
            "MutantSource": "(+ index 1)",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 21,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin . index)",
            "Result": "passed"
        },
        {
            "NumMutant": 109,
            "MutatorType": "aod-add",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 709,
            "MutantSourceCol": 77,
            "MutantSource": "(+ index 1)",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 21,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin . 1)",
            "Result": "passed"
        },
        {
            "NumMutant": 110,
            "MutatorType": "aod-minus",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 711,
            "MutantSourceCol": 64,
            "MutantSource": "(- size 1)",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 25,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin . size)",
            "Result": "passed"
        },
        {
            "NumMutant": 111,
            "MutatorType": "aod-minus",
            "MutantSourceFile": "./CodeCorpus/Assignment 6",
            "MutantSourceRow": 711,
            "MutantSourceCol": 64,
            "MutantSource": "(- size 1)",
            "MutantDestinationFile": "mutation-tester",
            "MutantDestinationRow": 25,
            "MutantDestinationCol": 10,
            "MutantDestination": "(begin . 1)",
            "Result": "passed"
        }
    ],
    "MutationScore": 0.892857,
    "TestFile": "foo"
}